////////////////////////////////////////////////////////////////////////////////
//
// Filename: regsemi.h
//
// Description: PIO Registers for EMI interface
//
// Xml Revision: 1
//
// Template revision: 6183
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) SigmaTel, Inc. Unpublished
//
// SigmaTel, Inc.
// Proprietary & Confidential
//
// This source code and the algorithms implemented therein constitute
// confidential information and may compromise trade secrets of SigmaTel, Inc.
// or its associates, and any unauthorized use thereof is prohibited.
//
////////////////////////////////////////////////////////////////////////////////
//
// WARNING!  THIS FILE IS AUTOMATICALLY GENERATED FROM XML.
//                DO NOT MODIFY THIS FILE DIRECTLY.
//
////////////////////////////////////////////////////////////////////////////////
//
// The following naming conventions are followed in this file.
//      XX_<module>_<regname>_<field>
//
// XX specifies the define / macro class
//      HW pertains to a register
//      BM indicates a Bit Mask
//      BF indicates a Bit Field macro
//
// <module> is the hardware module name which can be any of the following...
//      USB20 (Note when there is more than one copy of a given module, the
//      module name includes a number starting from 0 for the first instance
//      of that module)
//
// <regname> is the specific register within that module
//
// <field> is the specific bitfield within that <module>_<register>
//
// We also define the following...
//      hw_<module>_<regname>_t is typedef of anonymous union
//
////////////////////////////////////////////////////////////////////////////////

#ifndef _REGSEMI_H
#define _REGSEMI_H  1

#include "regs.h"

#ifndef REGS_EMI_BASE
#define REGS_EMI_BASE (REGS_BASE + 0x00020000)
#endif

////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_CTRL - EMI Control Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CE_SELECT      :  4;
        unsigned RESET_OUT      :  1;
        unsigned WRITE_PROTECT  :  1;
        unsigned MEM_WIDTH      :  1;
        unsigned RSVD0          : 23;
        unsigned CLKGATE        :  1;
        unsigned SFTRST         :  1;
    } B;
} hw_emi_ctrl_t;
#endif


//
// constants & macros for entire HW_EMI_CTRL register
//

#define HW_EMI_CTRL_ADDR      (REGS_EMI_BASE + 0x00000000)
#define HW_EMI_CTRL_SET_ADDR  (REGS_EMI_BASE + 0x00000004)
#define HW_EMI_CTRL_CLR_ADDR  (REGS_EMI_BASE + 0x00000008)
#define HW_EMI_CTRL_TOG_ADDR  (REGS_EMI_BASE + 0x0000000C)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_CTRL           (*(volatile hw_emi_ctrl_t *) HW_EMI_CTRL_ADDR)
#define HW_EMI_CTRL_RD()      (HW_EMI_CTRL.U)
#define HW_EMI_CTRL_WR(v)     (HW_EMI_CTRL.U = (v))
#define HW_EMI_CTRL_SET(v)    ((*(volatile reg32_t *) HW_EMI_CTRL_SET_ADDR) = (v))
#define HW_EMI_CTRL_CLR(v)    ((*(volatile reg32_t *) HW_EMI_CTRL_CLR_ADDR) = (v))
#define HW_EMI_CTRL_TOG(v)    ((*(volatile reg32_t *) HW_EMI_CTRL_TOG_ADDR) = (v))
#endif


//
// constants & macros for individual HW_EMI_CTRL bitfields
//

//--- Register HW_EMI_CTRL, field SFTRST

#define BP_EMI_CTRL_SFTRST      31
#define BM_EMI_CTRL_SFTRST      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_EMI_CTRL_SFTRST(v)   ((((reg32_t) v) << 31) & BM_EMI_CTRL_SFTRST)
#else
#define BF_EMI_CTRL_SFTRST(v)   (((v) << 31) & BM_EMI_CTRL_SFTRST)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_EMI_CTRL_SFTRST(v)   BF_CS1(EMI_CTRL, SFTRST, v)
#endif

//--- Register HW_EMI_CTRL, field CLKGATE

#define BP_EMI_CTRL_CLKGATE      30
#define BM_EMI_CTRL_CLKGATE      0x40000000

#define BF_EMI_CTRL_CLKGATE(v)   (((v) << 30) & BM_EMI_CTRL_CLKGATE)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_CTRL_CLKGATE(v)   BF_CS1(EMI_CTRL, CLKGATE, v)
#endif

//--- Register HW_EMI_CTRL, field MEM_WIDTH

#define BP_EMI_CTRL_MEM_WIDTH      6
#define BM_EMI_CTRL_MEM_WIDTH      0x00000040

#define BF_EMI_CTRL_MEM_WIDTH(v)   (((v) << 6) & BM_EMI_CTRL_MEM_WIDTH)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_CTRL_MEM_WIDTH(v)   BF_CS1(EMI_CTRL, MEM_WIDTH, v)
#endif

//--- Register HW_EMI_CTRL, field WRITE_PROTECT

#define BP_EMI_CTRL_WRITE_PROTECT      5
#define BM_EMI_CTRL_WRITE_PROTECT      0x00000020

#define BF_EMI_CTRL_WRITE_PROTECT(v)   (((v) << 5) & BM_EMI_CTRL_WRITE_PROTECT)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_CTRL_WRITE_PROTECT(v)   BF_CS1(EMI_CTRL, WRITE_PROTECT, v)
#endif

//--- Register HW_EMI_CTRL, field RESET_OUT

#define BP_EMI_CTRL_RESET_OUT      4
#define BM_EMI_CTRL_RESET_OUT      0x00000010

#define BF_EMI_CTRL_RESET_OUT(v)   (((v) << 4) & BM_EMI_CTRL_RESET_OUT)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_CTRL_RESET_OUT(v)   BF_CS1(EMI_CTRL, RESET_OUT, v)
#endif

//--- Register HW_EMI_CTRL, field CE_SELECT

#define BP_EMI_CTRL_CE_SELECT      0
#define BM_EMI_CTRL_CE_SELECT      0x0000000F

#define BF_EMI_CTRL_CE_SELECT(v)   (((v) << 0) & BM_EMI_CTRL_CE_SELECT)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_CTRL_CE_SELECT(v)   BF_CS1(EMI_CTRL, CE_SELECT, v)
#endif

#define BV_EMI_CTRL_CE_SELECT__NONE  0x0
#define BV_EMI_CTRL_CE_SELECT__CE0   0x1
#define BV_EMI_CTRL_CE_SELECT__CE1   0x2
#define BV_EMI_CTRL_CE_SELECT__CE2   0x4
#define BV_EMI_CTRL_CE_SELECT__CE3   0x8


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_STAT - NOR Flash Status Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned NOR_BUSY            :  1;
        unsigned DRAM_HALTED         :  1;
        unsigned RSVD0               : 27;
        unsigned LARGE_DRAM_ENABLED  :  1;
        unsigned NOR_PRESENT         :  1;
        unsigned DRAM_PRESENT        :  1;
    } B;
} hw_emi_stat_t;
#endif


//
// constants & macros for entire HW_EMI_STAT register
//

#define HW_EMI_STAT_ADDR      (REGS_EMI_BASE + 0x00000010)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_STAT           (*(volatile hw_emi_stat_t *) HW_EMI_STAT_ADDR)
#define HW_EMI_STAT_RD()      (HW_EMI_STAT.U)
#endif


//
// constants & macros for individual HW_EMI_STAT bitfields
//

//--- Register HW_EMI_STAT, field DRAM_PRESENT

#define BP_EMI_STAT_DRAM_PRESENT      31
#define BM_EMI_STAT_DRAM_PRESENT      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_EMI_STAT_DRAM_PRESENT(v)   ((((reg32_t) v) << 31) & BM_EMI_STAT_DRAM_PRESENT)
#else
#define BF_EMI_STAT_DRAM_PRESENT(v)   (((v) << 31) & BM_EMI_STAT_DRAM_PRESENT)
#endif

//--- Register HW_EMI_STAT, field NOR_PRESENT

#define BP_EMI_STAT_NOR_PRESENT      30
#define BM_EMI_STAT_NOR_PRESENT      0x40000000

#define BF_EMI_STAT_NOR_PRESENT(v)   (((v) << 30) & BM_EMI_STAT_NOR_PRESENT)

//--- Register HW_EMI_STAT, field LARGE_DRAM_ENABLED

#define BP_EMI_STAT_LARGE_DRAM_ENABLED      29
#define BM_EMI_STAT_LARGE_DRAM_ENABLED      0x20000000

#define BF_EMI_STAT_LARGE_DRAM_ENABLED(v)   (((v) << 29) & BM_EMI_STAT_LARGE_DRAM_ENABLED)

//--- Register HW_EMI_STAT, field DRAM_HALTED

#define BP_EMI_STAT_DRAM_HALTED      1
#define BM_EMI_STAT_DRAM_HALTED      0x00000002

#define BF_EMI_STAT_DRAM_HALTED(v)   (((v) << 1) & BM_EMI_STAT_DRAM_HALTED)

#define BV_EMI_STAT_DRAM_HALTED__NOT_HALTED  0x0
#define BV_EMI_STAT_DRAM_HALTED__HALTED      0x1

//--- Register HW_EMI_STAT, field NOR_BUSY

#define BP_EMI_STAT_NOR_BUSY      0
#define BM_EMI_STAT_NOR_BUSY      0x00000001

#define BF_EMI_STAT_NOR_BUSY(v)   (((v) << 0) & BM_EMI_STAT_NOR_BUSY)

#define BV_EMI_STAT_NOR_BUSY__NOT_BUSY  0x0
#define BV_EMI_STAT_NOR_BUSY__BUSY      0x1


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_TIME - NOR Flash Memory Timing Control Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TAS    :  4;
        unsigned RSVD0  :  4;
        unsigned TDS    :  5;
        unsigned RSVD1  :  3;
        unsigned TDH    :  4;
        unsigned RSVD2  :  4;
        unsigned THZ    :  4;
        unsigned RSVD4  :  4;
    } B;
} hw_emi_time_t;
#endif


//
// constants & macros for entire HW_EMI_TIME register
//

#define HW_EMI_TIME_ADDR      (REGS_EMI_BASE + 0x00000020)
#define HW_EMI_TIME_SET_ADDR  (REGS_EMI_BASE + 0x00000024)
#define HW_EMI_TIME_CLR_ADDR  (REGS_EMI_BASE + 0x00000028)
#define HW_EMI_TIME_TOG_ADDR  (REGS_EMI_BASE + 0x0000002C)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_TIME           (*(volatile hw_emi_time_t *) HW_EMI_TIME_ADDR)
#define HW_EMI_TIME_RD()      (HW_EMI_TIME.U)
#define HW_EMI_TIME_WR(v)     (HW_EMI_TIME.U = (v))
#define HW_EMI_TIME_SET(v)    ((*(volatile reg32_t *) HW_EMI_TIME_SET_ADDR) = (v))
#define HW_EMI_TIME_CLR(v)    ((*(volatile reg32_t *) HW_EMI_TIME_CLR_ADDR) = (v))
#define HW_EMI_TIME_TOG(v)    ((*(volatile reg32_t *) HW_EMI_TIME_TOG_ADDR) = (v))
#endif


//
// constants & macros for individual HW_EMI_TIME bitfields
//

//--- Register HW_EMI_TIME, field THZ

#define BP_EMI_TIME_THZ      24
#define BM_EMI_TIME_THZ      0x0F000000

#define BF_EMI_TIME_THZ(v)   (((v) << 24) & BM_EMI_TIME_THZ)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_TIME_THZ(v)   BF_CS1(EMI_TIME, THZ, v)
#endif

//--- Register HW_EMI_TIME, field TDH

#define BP_EMI_TIME_TDH      16
#define BM_EMI_TIME_TDH      0x000F0000

#define BF_EMI_TIME_TDH(v)   (((v) << 16) & BM_EMI_TIME_TDH)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_TIME_TDH(v)   BF_CS1(EMI_TIME, TDH, v)
#endif

//--- Register HW_EMI_TIME, field TDS

#define BP_EMI_TIME_TDS      8
#define BM_EMI_TIME_TDS      0x00001F00

#define BF_EMI_TIME_TDS(v)   (((v) << 8) & BM_EMI_TIME_TDS)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_TIME_TDS(v)   BF_CS1(EMI_TIME, TDS, v)
#endif

//--- Register HW_EMI_TIME, field TAS

#define BP_EMI_TIME_TAS      0
#define BM_EMI_TIME_TAS      0x0000000F

#define BF_EMI_TIME_TAS(v)   (((v) << 0) & BM_EMI_TIME_TAS)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_TIME_TAS(v)   BF_CS1(EMI_TIME, TAS, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_DDR_TEST_MODE_CSR - DDR Test Mode Control and Status Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned START  :  1;
        unsigned DONE   :  1;
        unsigned RSVD1  : 30;
    } B;
} hw_emi_ddr_test_mode_csr_t;
#endif


//
// constants & macros for entire HW_EMI_DDR_TEST_MODE_CSR register
//

#define HW_EMI_DDR_TEST_MODE_CSR_ADDR      (REGS_EMI_BASE + 0x00000030)
#define HW_EMI_DDR_TEST_MODE_CSR_SET_ADDR  (REGS_EMI_BASE + 0x00000034)
#define HW_EMI_DDR_TEST_MODE_CSR_CLR_ADDR  (REGS_EMI_BASE + 0x00000038)
#define HW_EMI_DDR_TEST_MODE_CSR_TOG_ADDR  (REGS_EMI_BASE + 0x0000003C)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_DDR_TEST_MODE_CSR           (*(volatile hw_emi_ddr_test_mode_csr_t *) HW_EMI_DDR_TEST_MODE_CSR_ADDR)
#define HW_EMI_DDR_TEST_MODE_CSR_RD()      (HW_EMI_DDR_TEST_MODE_CSR.U)
#define HW_EMI_DDR_TEST_MODE_CSR_WR(v)     (HW_EMI_DDR_TEST_MODE_CSR.U = (v))
#define HW_EMI_DDR_TEST_MODE_CSR_SET(v)    ((*(volatile reg32_t *) HW_EMI_DDR_TEST_MODE_CSR_SET_ADDR) = (v))
#define HW_EMI_DDR_TEST_MODE_CSR_CLR(v)    ((*(volatile reg32_t *) HW_EMI_DDR_TEST_MODE_CSR_CLR_ADDR) = (v))
#define HW_EMI_DDR_TEST_MODE_CSR_TOG(v)    ((*(volatile reg32_t *) HW_EMI_DDR_TEST_MODE_CSR_TOG_ADDR) = (v))
#endif


//
// constants & macros for individual HW_EMI_DDR_TEST_MODE_CSR bitfields
//

//--- Register HW_EMI_DDR_TEST_MODE_CSR, field DONE

#define BP_EMI_DDR_TEST_MODE_CSR_DONE      1
#define BM_EMI_DDR_TEST_MODE_CSR_DONE      0x00000002

#define BF_EMI_DDR_TEST_MODE_CSR_DONE(v)   (((v) << 1) & BM_EMI_DDR_TEST_MODE_CSR_DONE)

//--- Register HW_EMI_DDR_TEST_MODE_CSR, field START

#define BP_EMI_DDR_TEST_MODE_CSR_START      0
#define BM_EMI_DDR_TEST_MODE_CSR_START      0x00000001

#define BF_EMI_DDR_TEST_MODE_CSR_START(v)   (((v) << 0) & BM_EMI_DDR_TEST_MODE_CSR_START)

#ifndef __LANGUAGE_ASM__
#define BW_EMI_DDR_TEST_MODE_CSR_START(v)   BF_CS1(EMI_DDR_TEST_MODE_CSR, START, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_DEBUG - NOR Flash Debug Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned NOR_STATE  :  4;
        unsigned RSVD1      : 28;
    } B;
} hw_emi_debug_t;
#endif


//
// constants & macros for entire HW_EMI_DEBUG register
//

#define HW_EMI_DEBUG_ADDR      (REGS_EMI_BASE + 0x00000080)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_DEBUG           (*(volatile hw_emi_debug_t *) HW_EMI_DEBUG_ADDR)
#define HW_EMI_DEBUG_RD()      (HW_EMI_DEBUG.U)
#endif


//
// constants & macros for individual HW_EMI_DEBUG bitfields
//

//--- Register HW_EMI_DEBUG, field NOR_STATE

#define BP_EMI_DEBUG_NOR_STATE      0
#define BM_EMI_DEBUG_NOR_STATE      0x0000000F

#define BF_EMI_DEBUG_NOR_STATE(v)   (((v) << 0) & BM_EMI_DEBUG_NOR_STATE)


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_DDR_TEST_MODE_STATUS0 - DDR Test Mode Status Register 0
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ADDR0  : 13;
        unsigned RSVD1  : 19;
    } B;
} hw_emi_ddr_test_mode_status0_t;
#endif


//
// constants & macros for entire HW_EMI_DDR_TEST_MODE_STATUS0 register
//

#define HW_EMI_DDR_TEST_MODE_STATUS0_ADDR      (REGS_EMI_BASE + 0x00000090)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_DDR_TEST_MODE_STATUS0           (*(volatile hw_emi_ddr_test_mode_status0_t *) HW_EMI_DDR_TEST_MODE_STATUS0_ADDR)
#define HW_EMI_DDR_TEST_MODE_STATUS0_RD()      (HW_EMI_DDR_TEST_MODE_STATUS0.U)
#endif


//
// constants & macros for individual HW_EMI_DDR_TEST_MODE_STATUS0 bitfields
//

//--- Register HW_EMI_DDR_TEST_MODE_STATUS0, field ADDR0

#define BP_EMI_DDR_TEST_MODE_STATUS0_ADDR0      0
#define BM_EMI_DDR_TEST_MODE_STATUS0_ADDR0      0x00001FFF

#define BF_EMI_DDR_TEST_MODE_STATUS0_ADDR0(v)   (((v) << 0) & BM_EMI_DDR_TEST_MODE_STATUS0_ADDR0)


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_DDR_TEST_MODE_STATUS1 - DDR Test Mode Status Register 1
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ADDR1  : 13;
        unsigned RSVD1  : 19;
    } B;
} hw_emi_ddr_test_mode_status1_t;
#endif


//
// constants & macros for entire HW_EMI_DDR_TEST_MODE_STATUS1 register
//

#define HW_EMI_DDR_TEST_MODE_STATUS1_ADDR      (REGS_EMI_BASE + 0x000000A0)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_DDR_TEST_MODE_STATUS1           (*(volatile hw_emi_ddr_test_mode_status1_t *) HW_EMI_DDR_TEST_MODE_STATUS1_ADDR)
#define HW_EMI_DDR_TEST_MODE_STATUS1_RD()      (HW_EMI_DDR_TEST_MODE_STATUS1.U)
#endif


//
// constants & macros for individual HW_EMI_DDR_TEST_MODE_STATUS1 bitfields
//

//--- Register HW_EMI_DDR_TEST_MODE_STATUS1, field ADDR1

#define BP_EMI_DDR_TEST_MODE_STATUS1_ADDR1      0
#define BM_EMI_DDR_TEST_MODE_STATUS1_ADDR1      0x00001FFF

#define BF_EMI_DDR_TEST_MODE_STATUS1_ADDR1(v)   (((v) << 0) & BM_EMI_DDR_TEST_MODE_STATUS1_ADDR1)


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_DDR_TEST_MODE_STATUS2 - DDR Test Mode Status Register 2
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  DATA0;
    } B;
} hw_emi_ddr_test_mode_status2_t;
#endif


//
// constants & macros for entire HW_EMI_DDR_TEST_MODE_STATUS2 register
//

#define HW_EMI_DDR_TEST_MODE_STATUS2_ADDR      (REGS_EMI_BASE + 0x000000B0)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_DDR_TEST_MODE_STATUS2           (*(volatile hw_emi_ddr_test_mode_status2_t *) HW_EMI_DDR_TEST_MODE_STATUS2_ADDR)
#define HW_EMI_DDR_TEST_MODE_STATUS2_RD()      (HW_EMI_DDR_TEST_MODE_STATUS2.U)
#endif


//
// constants & macros for individual HW_EMI_DDR_TEST_MODE_STATUS2 bitfields
//

//--- Register HW_EMI_DDR_TEST_MODE_STATUS2, field DATA0

#define BP_EMI_DDR_TEST_MODE_STATUS2_DATA0      0
#define BM_EMI_DDR_TEST_MODE_STATUS2_DATA0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_EMI_DDR_TEST_MODE_STATUS2_DATA0(v)   ((reg32_t) v)
#else
#define BF_EMI_DDR_TEST_MODE_STATUS2_DATA0(v)   (v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_DDR_TEST_MODE_STATUS3 - DDR Test Mode Status Register 3
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  DATA1;
    } B;
} hw_emi_ddr_test_mode_status3_t;
#endif


//
// constants & macros for entire HW_EMI_DDR_TEST_MODE_STATUS3 register
//

#define HW_EMI_DDR_TEST_MODE_STATUS3_ADDR      (REGS_EMI_BASE + 0x000000C0)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_DDR_TEST_MODE_STATUS3           (*(volatile hw_emi_ddr_test_mode_status3_t *) HW_EMI_DDR_TEST_MODE_STATUS3_ADDR)
#define HW_EMI_DDR_TEST_MODE_STATUS3_RD()      (HW_EMI_DDR_TEST_MODE_STATUS3.U)
#endif


//
// constants & macros for individual HW_EMI_DDR_TEST_MODE_STATUS3 bitfields
//

//--- Register HW_EMI_DDR_TEST_MODE_STATUS3, field DATA1

#define BP_EMI_DDR_TEST_MODE_STATUS3_DATA1      0
#define BM_EMI_DDR_TEST_MODE_STATUS3_DATA1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_EMI_DDR_TEST_MODE_STATUS3_DATA1(v)   ((reg32_t) v)
#else
#define BF_EMI_DDR_TEST_MODE_STATUS3_DATA1(v)   (v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_EMI_VERSION - EMI Version Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  STEP;
        reg8_t   MINOR;
        reg8_t   MAJOR;
    } B;
} hw_emi_version_t;
#endif


//
// constants & macros for entire HW_EMI_VERSION register
//

#define HW_EMI_VERSION_ADDR      (REGS_EMI_BASE + 0x000000F0)

#ifndef __LANGUAGE_ASM__
#define HW_EMI_VERSION           (*(volatile hw_emi_version_t *) HW_EMI_VERSION_ADDR)
#define HW_EMI_VERSION_RD()      (HW_EMI_VERSION.U)
#endif


//
// constants & macros for individual HW_EMI_VERSION bitfields
//

//--- Register HW_EMI_VERSION, field MAJOR

#define BP_EMI_VERSION_MAJOR      24
#define BM_EMI_VERSION_MAJOR      0xFF000000

#ifndef __LANGUAGE_ASM__
#define BF_EMI_VERSION_MAJOR(v)   ((((reg32_t) v) << 24) & BM_EMI_VERSION_MAJOR)
#else
#define BF_EMI_VERSION_MAJOR(v)   (((v) << 24) & BM_EMI_VERSION_MAJOR)
#endif

//--- Register HW_EMI_VERSION, field MINOR

#define BP_EMI_VERSION_MINOR      16
#define BM_EMI_VERSION_MINOR      0x00FF0000

#define BF_EMI_VERSION_MINOR(v)   (((v) << 16) & BM_EMI_VERSION_MINOR)

//--- Register HW_EMI_VERSION, field STEP

#define BP_EMI_VERSION_STEP      0
#define BM_EMI_VERSION_STEP      0x0000FFFF

#define BF_EMI_VERSION_STEP(v)   (((v) << 0) & BM_EMI_VERSION_STEP)


#endif // _REGSEMI_H

////////////////////////////////////////////////////////////////////////////////
