////////////////////////////////////////////////////////////////////////////////
//
// Filename: regsusbctrl.h
//
// Description: PIO Registers for USBCTRL interface
//
// Xml Revision: 1.11
//
// Template revision: 3790
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) SigmaTel, Inc. Unpublished
//
// SigmaTel, Inc.
// Proprietary & Confidential
//
// This source code and the algorithms implemented therein constitute
// confidential information and may compromise trade secrets of SigmaTel, Inc.
// or its associates, and any unauthorized use thereof is prohibited.
//
////////////////////////////////////////////////////////////////////////////////
//
// WARNING!  THIS FILE IS AUTOMATICALLY GENERATED FROM XML.
//                DO NOT MODIFY THIS FILE DIRECTLY.
//
////////////////////////////////////////////////////////////////////////////////
//
// The following naming conventions are followed in this file.
//      XX_<module>_<regname>_<field>
//
// XX specifies the define / macro class
//      HW pertains to a register
//      BM indicates a Bit Mask
//      BF indicates a Bit Field macro
//
// <module> is the hardware module name which can be any of the following...
//      USB20 (Note when there is more than one copy of a given module, the
//      module name includes a number starting from 0 for the first instance
//      of that module)
//
// <regname> is the specific register within that module
//
// <field> is the specific bitfield within that <module>_<register>
//
// We also define the following...
//      hw_<module>_<regname>_t is typedef of anonymous union
//
////////////////////////////////////////////////////////////////////////////////

#ifndef _REGSUSBCTRL_H
#define _REGSUSBCTRL_H  1

#include "regs.h"

#ifndef REGS_USBCTRL_BASE
#define REGS_USBCTRL_BASE (REGS_BASE + 0x00080000)
#endif

////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ID - USB CTRL ID
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   ID;
        reg8_t   ID_N;
        reg8_t   REV;
        reg8_t   RESVRD;
    } B;
} hw_usbctrl_id_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ID register
//

#define HW_USBCTRL_ID_ADDR      (REGS_USBCTRL_BASE + 0x00000000)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ID           (*(volatile hw_usbctrl_id_t *) HW_USBCTRL_ID_ADDR)
#define HW_USBCTRL_ID_RD()      (HW_USBCTRL_ID.U)
#endif


//
// constants & macros for individual HW_USBCTRL_ID bitfields
//

//--- Register HW_USBCTRL_ID, field REV

#define BP_USBCTRL_ID_REV      16
#define BM_USBCTRL_ID_REV      0x00FF0000

#define BF_USBCTRL_ID_REV(v)   (((v) << 16) & BM_USBCTRL_ID_REV)

//--- Register HW_USBCTRL_ID, field ID_N

#define BP_USBCTRL_ID_ID_N      8
#define BM_USBCTRL_ID_ID_N      0x0000FF00

#define BF_USBCTRL_ID_ID_N(v)   (((v) << 8) & BM_USBCTRL_ID_ID_N)

//--- Register HW_USBCTRL_ID, field ID

#define BP_USBCTRL_ID_ID      0
#define BM_USBCTRL_ID_ID      0x000000FF

#define BF_USBCTRL_ID_ID(v)   (((v) << 0) & BM_USBCTRL_ID_ID)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_GENERAL - USB CTRL General Hardware Params Register
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RT      :  1;
        unsigned CLKC    :  2;
        unsigned BWT     :  1;
        unsigned PHYW    :  2;
        unsigned PHYM    :  3;
        unsigned SM      :  1;
        unsigned RESVRD  : 22;
    } B;
} hw_usbctrl_general_t;
#endif


//
// constants & macros for entire HW_USBCTRL_GENERAL register
//

#define HW_USBCTRL_GENERAL_ADDR      (REGS_USBCTRL_BASE + 0x00000004)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_GENERAL           (*(volatile hw_usbctrl_general_t *) HW_USBCTRL_GENERAL_ADDR)
#define HW_USBCTRL_GENERAL_RD()      (HW_USBCTRL_GENERAL.U)
#endif


//
// constants & macros for individual HW_USBCTRL_GENERAL bitfields
//

//--- Register HW_USBCTRL_GENERAL, field SM

#define BP_USBCTRL_GENERAL_SM      9
#define BM_USBCTRL_GENERAL_SM      0x00000200

#define BF_USBCTRL_GENERAL_SM(v)   (((v) << 9) & BM_USBCTRL_GENERAL_SM)

//--- Register HW_USBCTRL_GENERAL, field PHYM

#define BP_USBCTRL_GENERAL_PHYM      6
#define BM_USBCTRL_GENERAL_PHYM      0x000001C0

#define BF_USBCTRL_GENERAL_PHYM(v)   (((v) << 6) & BM_USBCTRL_GENERAL_PHYM)

//--- Register HW_USBCTRL_GENERAL, field PHYW

#define BP_USBCTRL_GENERAL_PHYW      4
#define BM_USBCTRL_GENERAL_PHYW      0x00000030

#define BF_USBCTRL_GENERAL_PHYW(v)   (((v) << 4) & BM_USBCTRL_GENERAL_PHYW)

//--- Register HW_USBCTRL_GENERAL, field BWT

#define BP_USBCTRL_GENERAL_BWT      3
#define BM_USBCTRL_GENERAL_BWT      0x00000008

#define BF_USBCTRL_GENERAL_BWT(v)   (((v) << 3) & BM_USBCTRL_GENERAL_BWT)

//--- Register HW_USBCTRL_GENERAL, field CLKC

#define BP_USBCTRL_GENERAL_CLKC      1
#define BM_USBCTRL_GENERAL_CLKC      0x00000006

#define BF_USBCTRL_GENERAL_CLKC(v)   (((v) << 1) & BM_USBCTRL_GENERAL_CLKC)

//--- Register HW_USBCTRL_GENERAL, field RT

#define BP_USBCTRL_GENERAL_RT      0
#define BM_USBCTRL_GENERAL_RT      0x00000001

#define BF_USBCTRL_GENERAL_RT(v)   (((v) << 0) & BM_USBCTRL_GENERAL_RT)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_HOST - USB CTRL HOST
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned HC      :  1;
        unsigned NPORT   :  3;
        unsigned RESVRD  : 12;
        reg8_t   TTASY;
        reg8_t   TTPER;
    } B;
} hw_usbctrl_host_t;
#endif


//
// constants & macros for entire HW_USBCTRL_HOST register
//

#define HW_USBCTRL_HOST_ADDR      (REGS_USBCTRL_BASE + 0x00000008)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_HOST           (*(volatile hw_usbctrl_host_t *) HW_USBCTRL_HOST_ADDR)
#define HW_USBCTRL_HOST_RD()      (HW_USBCTRL_HOST.U)
#endif


//
// constants & macros for individual HW_USBCTRL_HOST bitfields
//

//--- Register HW_USBCTRL_HOST, field TTPER

#define BP_USBCTRL_HOST_TTPER      24
#define BM_USBCTRL_HOST_TTPER      0xFF000000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_HOST_TTPER(v)   ((((reg32_t) v) << 24) & BM_USBCTRL_HOST_TTPER)
#else
#define BF_USBCTRL_HOST_TTPER(v)   (((v) << 24) & BM_USBCTRL_HOST_TTPER)
#endif

//--- Register HW_USBCTRL_HOST, field TTASY

#define BP_USBCTRL_HOST_TTASY      16
#define BM_USBCTRL_HOST_TTASY      0x00FF0000

#define BF_USBCTRL_HOST_TTASY(v)   (((v) << 16) & BM_USBCTRL_HOST_TTASY)

//--- Register HW_USBCTRL_HOST, field NPORT

#define BP_USBCTRL_HOST_NPORT      1
#define BM_USBCTRL_HOST_NPORT      0x0000000E

#define BF_USBCTRL_HOST_NPORT(v)   (((v) << 1) & BM_USBCTRL_HOST_NPORT)

//--- Register HW_USBCTRL_HOST, field HC

#define BP_USBCTRL_HOST_HC      0
#define BM_USBCTRL_HOST_HC      0x00000001

#define BF_USBCTRL_HOST_HC(v)   (((v) << 0) & BM_USBCTRL_HOST_HC)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_DEVICE - USB CTRL DEVICE
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned DC      :  1;
        unsigned DEVEP   :  5;
        unsigned RESVRD  : 26;
    } B;
} hw_usbctrl_device_t;
#endif


//
// constants & macros for entire HW_USBCTRL_DEVICE register
//

#define HW_USBCTRL_DEVICE_ADDR      (REGS_USBCTRL_BASE + 0x0000000C)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_DEVICE           (*(volatile hw_usbctrl_device_t *) HW_USBCTRL_DEVICE_ADDR)
#define HW_USBCTRL_DEVICE_RD()      (HW_USBCTRL_DEVICE.U)
#endif


//
// constants & macros for individual HW_USBCTRL_DEVICE bitfields
//

//--- Register HW_USBCTRL_DEVICE, field DEVEP

#define BP_USBCTRL_DEVICE_DEVEP      1
#define BM_USBCTRL_DEVICE_DEVEP      0x0000003E

#define BF_USBCTRL_DEVICE_DEVEP(v)   (((v) << 1) & BM_USBCTRL_DEVICE_DEVEP)

//--- Register HW_USBCTRL_DEVICE, field DC

#define BP_USBCTRL_DEVICE_DC      0
#define BM_USBCTRL_DEVICE_DC      0x00000001

#define BF_USBCTRL_DEVICE_DC(v)   (((v) << 0) & BM_USBCTRL_DEVICE_DC)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_TXBUF - USB CTRL TXBUF
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   TXBURST;
        reg8_t   TXADD;
        reg8_t   TXCHANADD;
        unsigned RESVRD     :  7;
        unsigned TXLCR      :  1;
    } B;
} hw_usbctrl_txbuf_t;
#endif


//
// constants & macros for entire HW_USBCTRL_TXBUF register
//

#define HW_USBCTRL_TXBUF_ADDR      (REGS_USBCTRL_BASE + 0x00000010)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_TXBUF           (*(volatile hw_usbctrl_txbuf_t *) HW_USBCTRL_TXBUF_ADDR)
#define HW_USBCTRL_TXBUF_RD()      (HW_USBCTRL_TXBUF.U)
#endif


//
// constants & macros for individual HW_USBCTRL_TXBUF bitfields
//

//--- Register HW_USBCTRL_TXBUF, field TXLCR

#define BP_USBCTRL_TXBUF_TXLCR      31
#define BM_USBCTRL_TXBUF_TXLCR      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_TXBUF_TXLCR(v)   ((((reg32_t) v) << 31) & BM_USBCTRL_TXBUF_TXLCR)
#else
#define BF_USBCTRL_TXBUF_TXLCR(v)   (((v) << 31) & BM_USBCTRL_TXBUF_TXLCR)
#endif

//--- Register HW_USBCTRL_TXBUF, field TXCHANADD

#define BP_USBCTRL_TXBUF_TXCHANADD      16
#define BM_USBCTRL_TXBUF_TXCHANADD      0x00FF0000

#define BF_USBCTRL_TXBUF_TXCHANADD(v)   (((v) << 16) & BM_USBCTRL_TXBUF_TXCHANADD)

//--- Register HW_USBCTRL_TXBUF, field TXADD

#define BP_USBCTRL_TXBUF_TXADD      8
#define BM_USBCTRL_TXBUF_TXADD      0x0000FF00

#define BF_USBCTRL_TXBUF_TXADD(v)   (((v) << 8) & BM_USBCTRL_TXBUF_TXADD)

//--- Register HW_USBCTRL_TXBUF, field TXBURST

#define BP_USBCTRL_TXBUF_TXBURST      0
#define BM_USBCTRL_TXBUF_TXBURST      0x000000FF

#define BF_USBCTRL_TXBUF_TXBURST(v)   (((v) << 0) & BM_USBCTRL_TXBUF_TXBURST)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_RXBUF - USB CTRL RXBUF
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   RXBURST;
        reg8_t   RXADD;
        reg16_t  RESVRD;
    } B;
} hw_usbctrl_rxbuf_t;
#endif


//
// constants & macros for entire HW_USBCTRL_RXBUF register
//

#define HW_USBCTRL_RXBUF_ADDR      (REGS_USBCTRL_BASE + 0x00000014)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_RXBUF           (*(volatile hw_usbctrl_rxbuf_t *) HW_USBCTRL_RXBUF_ADDR)
#define HW_USBCTRL_RXBUF_RD()      (HW_USBCTRL_RXBUF.U)
#endif


//
// constants & macros for individual HW_USBCTRL_RXBUF bitfields
//

//--- Register HW_USBCTRL_RXBUF, field RXADD

#define BP_USBCTRL_RXBUF_RXADD      8
#define BM_USBCTRL_RXBUF_RXADD      0x0000FF00

#define BF_USBCTRL_RXBUF_RXADD(v)   (((v) << 8) & BM_USBCTRL_RXBUF_RXADD)

//--- Register HW_USBCTRL_RXBUF, field RXBURST

#define BP_USBCTRL_RXBUF_RXBURST      0
#define BM_USBCTRL_RXBUF_RXBURST      0x000000FF

#define BF_USBCTRL_RXBUF_RXBURST(v)   (((v) << 0) & BM_USBCTRL_RXBUF_RXBURST)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_TTTXBUF - USB CTRL TTTXBUF
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  TTTXBUF;
    } B;
} hw_usbctrl_tttxbuf_t;
#endif


//
// constants & macros for entire HW_USBCTRL_TTTXBUF register
//

#define HW_USBCTRL_TTTXBUF_ADDR      (REGS_USBCTRL_BASE + 0x00000018)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_TTTXBUF           (*(volatile hw_usbctrl_tttxbuf_t *) HW_USBCTRL_TTTXBUF_ADDR)
#define HW_USBCTRL_TTTXBUF_RD()      (HW_USBCTRL_TTTXBUF.U)
#endif


//
// constants & macros for individual HW_USBCTRL_TTTXBUF bitfields
//

//--- Register HW_USBCTRL_TTTXBUF, field TTTXBUF

#define BP_USBCTRL_TTTXBUF_TTTXBUF      0
#define BM_USBCTRL_TTTXBUF_TTTXBUF      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_TTTXBUF_TTTXBUF(v)   ((reg32_t) v)
#else
#define BF_USBCTRL_TTTXBUF_TTTXBUF(v)   (v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_TTRXBUF - USB CTRL TTRXBUF
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  TTRXBUF;
    } B;
} hw_usbctrl_ttrxbuf_t;
#endif


//
// constants & macros for entire HW_USBCTRL_TTRXBUF register
//

#define HW_USBCTRL_TTRXBUF_ADDR      (REGS_USBCTRL_BASE + 0x0000001C)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_TTRXBUF           (*(volatile hw_usbctrl_ttrxbuf_t *) HW_USBCTRL_TTRXBUF_ADDR)
#define HW_USBCTRL_TTRXBUF_RD()      (HW_USBCTRL_TTRXBUF.U)
#endif


//
// constants & macros for individual HW_USBCTRL_TTRXBUF bitfields
//

//--- Register HW_USBCTRL_TTRXBUF, field TTRXBUF

#define BP_USBCTRL_TTRXBUF_TTRXBUF      0
#define BM_USBCTRL_TTRXBUF_TTRXBUF      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_TTRXBUF_TTRXBUF(v)   ((reg32_t) v)
#else
#define BF_USBCTRL_TTRXBUF_TTRXBUF(v)   (v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_CAPLENGTH - USB CTRL CapLength
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   LENGTH;
        reg8_t   RESVRD;
        reg16_t  HCIVER;
    } B;
} hw_usbctrl_caplength_t;
#endif


//
// constants & macros for entire HW_USBCTRL_CAPLENGTH register
//

#define HW_USBCTRL_CAPLENGTH_ADDR      (REGS_USBCTRL_BASE + 0x00000100)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_CAPLENGTH           (*(volatile hw_usbctrl_caplength_t *) HW_USBCTRL_CAPLENGTH_ADDR)
#define HW_USBCTRL_CAPLENGTH_RD()      (HW_USBCTRL_CAPLENGTH.U)
#endif


//
// constants & macros for individual HW_USBCTRL_CAPLENGTH bitfields
//

//--- Register HW_USBCTRL_CAPLENGTH, field HCIVER

#define BP_USBCTRL_CAPLENGTH_HCIVER      16
#define BM_USBCTRL_CAPLENGTH_HCIVER      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_CAPLENGTH_HCIVER(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_CAPLENGTH_HCIVER)
#else
#define BF_USBCTRL_CAPLENGTH_HCIVER(v)   (((v) << 16) & BM_USBCTRL_CAPLENGTH_HCIVER)
#endif

//--- Register HW_USBCTRL_CAPLENGTH, field LENGTH

#define BP_USBCTRL_CAPLENGTH_LENGTH      0
#define BM_USBCTRL_CAPLENGTH_LENGTH      0x000000FF

#define BF_USBCTRL_CAPLENGTH_LENGTH(v)   (((v) << 0) & BM_USBCTRL_CAPLENGTH_LENGTH)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_HCSPARAMS - USB CTRL HCS-PARAMS
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD2  :  4;
        unsigned NTT     :  4;
        unsigned NPTT    :  4;
        unsigned RSRVD1  :  3;
        unsigned PI      :  1;
        unsigned NCC1    :  4;
        unsigned NPCC    :  4;
        unsigned RSRVD0  :  3;
        unsigned PPC     :  1;
        unsigned NPORTS  :  4;
    } B;
} hw_usbctrl_hcsparams_t;
#endif


//
// constants & macros for entire HW_USBCTRL_HCSPARAMS register
//

#define HW_USBCTRL_HCSPARAMS_ADDR      (REGS_USBCTRL_BASE + 0x00000104)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_HCSPARAMS           (*(volatile hw_usbctrl_hcsparams_t *) HW_USBCTRL_HCSPARAMS_ADDR)
#define HW_USBCTRL_HCSPARAMS_RD()      (HW_USBCTRL_HCSPARAMS.U)
#endif


//
// constants & macros for individual HW_USBCTRL_HCSPARAMS bitfields
//

//--- Register HW_USBCTRL_HCSPARAMS, field NPORTS

#define BP_USBCTRL_HCSPARAMS_NPORTS      0
#define BM_USBCTRL_HCSPARAMS_NPORTS      0x0000000F

#define BF_USBCTRL_HCSPARAMS_NPORTS(v)   (((v) << 0) & BM_USBCTRL_HCSPARAMS_NPORTS)

//--- Register HW_USBCTRL_HCSPARAMS, field PPC

#define BP_USBCTRL_HCSPARAMS_PPC      4
#define BM_USBCTRL_HCSPARAMS_PPC      0x00000010

#define BF_USBCTRL_HCSPARAMS_PPC(v)   (((v) << 4) & BM_USBCTRL_HCSPARAMS_PPC)

//--- Register HW_USBCTRL_HCSPARAMS, field NPCC

#define BP_USBCTRL_HCSPARAMS_NPCC      8
#define BM_USBCTRL_HCSPARAMS_NPCC      0x00000F00

#define BF_USBCTRL_HCSPARAMS_NPCC(v)   (((v) << 8) & BM_USBCTRL_HCSPARAMS_NPCC)

//--- Register HW_USBCTRL_HCSPARAMS, field NCC

#define BP_USBCTRL_HCSPARAMS_NCC      12
#define BM_USBCTRL_HCSPARAMS_NCC      0x0000F000

#define BF_USBCTRL_HCSPARAMS_NCC(v)   (((v) << 12) & BM_USBCTRL_HCSPARAMS_NCC)

//--- Register HW_USBCTRL_HCSPARAMS, field PI

#define BP_USBCTRL_HCSPARAMS_PI      16
#define BM_USBCTRL_HCSPARAMS_PI      0x00010000

#define BF_USBCTRL_HCSPARAMS_PI(v)   (((v) << 16) & BM_USBCTRL_HCSPARAMS_PI)

//--- Register HW_USBCTRL_HCSPARAMS, field NPTT

#define BP_USBCTRL_HCSPARAMS_NPTT      20
#define BM_USBCTRL_HCSPARAMS_NPTT      0x00F00000

#define BF_USBCTRL_HCSPARAMS_NPTT(v)   (((v) << 20) & BM_USBCTRL_HCSPARAMS_NPTT)

//--- Register HW_USBCTRL_HCSPARAMS, field NTT

#define BP_USBCTRL_HCSPARAMS_NTT      24
#define BM_USBCTRL_HCSPARAMS_NTT      0x0F000000

#define BF_USBCTRL_HCSPARAMS_NTT(v)   (((v) << 24) & BM_USBCTRL_HCSPARAMS_NTT)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_HCCPARAMS - USB CTRL HCC-PARAMS
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  RSRVD2;
        reg8_t   ISO_SCH_THRESHOLD;
        unsigned RSRVD1             :  5;
        unsigned ASYNC_PARK_CAP     :  1;
        unsigned PGM_FRM_LIST_FLAG  :  1;
        unsigned ADDR64BITCAP       :  1;
    } B;
} hw_usbctrl_hccparams_t;
#endif


//
// constants & macros for entire HW_USBCTRL_HCCPARAMS register
//

#define HW_USBCTRL_HCCPARAMS_ADDR      (REGS_USBCTRL_BASE + 0x00000108)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_HCCPARAMS           (*(volatile hw_usbctrl_hccparams_t *) HW_USBCTRL_HCCPARAMS_ADDR)
#define HW_USBCTRL_HCCPARAMS_RD()      (HW_USBCTRL_HCCPARAMS.U)
#endif


//
// constants & macros for individual HW_USBCTRL_HCCPARAMS bitfields
//

//--- Register HW_USBCTRL_HCCPARAMS, field ADDR64BITCAP

#define BP_USBCTRL_HCCPARAMS_ADDR64BITCAP      0
#define BM_USBCTRL_HCCPARAMS_ADDR64BITCAP      0x00000001

#define BF_USBCTRL_HCCPARAMS_ADDR64BITCAP(v)   (((v) << 0) & BM_USBCTRL_HCCPARAMS_ADDR64BITCAP)

//--- Register HW_USBCTRL_HCCPARAMS, field PGM_FRM_LIST_FLAG

#define BP_USBCTRL_HCCPARAMS_PGM_FRM_LIST_FLAG      1
#define BM_USBCTRL_HCCPARAMS_PGM_FRM_LIST_FLAG      0x00000002

#define BF_USBCTRL_HCCPARAMS_PGM_FRM_LIST_FLAG(v)   (((v) << 1) & BM_USBCTRL_HCCPARAMS_PGM_FRM_LIST_FLAG)

//--- Register HW_USBCTRL_HCCPARAMS, field ASYNC_PARK_CAP

#define BP_USBCTRL_HCCPARAMS_ASYNC_PARK_CAP      2
#define BM_USBCTRL_HCCPARAMS_ASYNC_PARK_CAP      0x00000004

#define BF_USBCTRL_HCCPARAMS_ASYNC_PARK_CAP(v)   (((v) << 2) & BM_USBCTRL_HCCPARAMS_ASYNC_PARK_CAP)

//--- Register HW_USBCTRL_HCCPARAMS, field ISO_SCH_THRESHOLD

#define BP_USBCTRL_HCCPARAMS_ISO_SCH_THRESHOLD      8
#define BM_USBCTRL_HCCPARAMS_ISO_SCH_THRESHOLD      0x0000FF00

#define BF_USBCTRL_HCCPARAMS_ISO_SCH_THRESHOLD(v)   (((v) << 8) & BM_USBCTRL_HCCPARAMS_ISO_SCH_THRESHOLD)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_DCIVERSION - USB CTRL DCI-VER
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  DCIVER;
        reg16_t  RESVRD;
    } B;
} hw_usbctrl_dciversion_t;
#endif


//
// constants & macros for entire HW_USBCTRL_DCIVERSION register
//

#define HW_USBCTRL_DCIVERSION_ADDR      (REGS_USBCTRL_BASE + 0x00000120)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_DCIVERSION           (*(volatile hw_usbctrl_dciversion_t *) HW_USBCTRL_DCIVERSION_ADDR)
#define HW_USBCTRL_DCIVERSION_RD()      (HW_USBCTRL_DCIVERSION.U)
#define HW_USBCTRL_DCIVERSION_WR(v)     (HW_USBCTRL_DCIVERSION.U = (v))
#define HW_USBCTRL_DCIVERSION_SET(v)    (HW_USBCTRL_DCIVERSION_WR(HW_USBCTRL_DCIVERSION_RD() |  (v)))
#define HW_USBCTRL_DCIVERSION_CLR(v)    (HW_USBCTRL_DCIVERSION_WR(HW_USBCTRL_DCIVERSION_RD() & ~(v)))
#define HW_USBCTRL_DCIVERSION_TOG(v)    (HW_USBCTRL_DCIVERSION_WR(HW_USBCTRL_DCIVERSION_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_DCIVERSION bitfields
//

//--- Register HW_USBCTRL_DCIVERSION, field DCIVER

#define BP_USBCTRL_DCIVERSION_DCIVER      0
#define BM_USBCTRL_DCIVERSION_DCIVER      0x0000FFFF

#define BF_USBCTRL_DCIVERSION_DCIVER(v)   (((v) << 0) & BM_USBCTRL_DCIVERSION_DCIVER)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_DCIVERSION_DCIVER(v)   (HW_USBCTRL_DCIVERSION.B.DCIVER = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_DCCPARAMS - USB CTRL DCC-PARAMS
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned DEN     :  5;
        unsigned RSRVD2  :  2;
        unsigned DC      :  1;
        unsigned HC      :  1;
        unsigned RSRVD1  : 23;
    } B;
} hw_usbctrl_dccparams_t;
#endif


//
// constants & macros for entire HW_USBCTRL_DCCPARAMS register
//

#define HW_USBCTRL_DCCPARAMS_ADDR      (REGS_USBCTRL_BASE + 0x00000124)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_DCCPARAMS           (*(volatile hw_usbctrl_dccparams_t *) HW_USBCTRL_DCCPARAMS_ADDR)
#define HW_USBCTRL_DCCPARAMS_RD()      (HW_USBCTRL_DCCPARAMS.U)
#endif


//
// constants & macros for individual HW_USBCTRL_DCCPARAMS bitfields
//

//--- Register HW_USBCTRL_DCCPARAMS, field HC

#define BP_USBCTRL_DCCPARAMS_HC      8
#define BM_USBCTRL_DCCPARAMS_HC      0x00000100

#define BF_USBCTRL_DCCPARAMS_HC(v)   (((v) << 8) & BM_USBCTRL_DCCPARAMS_HC)

//--- Register HW_USBCTRL_DCCPARAMS, field DC

#define BP_USBCTRL_DCCPARAMS_DC      7
#define BM_USBCTRL_DCCPARAMS_DC      0x00000080

#define BF_USBCTRL_DCCPARAMS_DC(v)   (((v) << 7) & BM_USBCTRL_DCCPARAMS_DC)

//--- Register HW_USBCTRL_DCCPARAMS, field DEN

#define BP_USBCTRL_DCCPARAMS_DEN      0
#define BM_USBCTRL_DCCPARAMS_DEN      0x0000001F

#define BF_USBCTRL_DCCPARAMS_DEN(v)   (((v) << 0) & BM_USBCTRL_DCCPARAMS_DEN)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_USBCMD - USB CTRL CMD
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   RSRVD3;
        reg8_t   ITC;
        unsigned FS2     :  1;
        unsigned RSRVD2  :  3;
        unsigned ASPE    :  1;
        unsigned RSRVD1  :  1;
        unsigned ASP1    :  1;
        unsigned ASP0    :  1;
        unsigned LR      :  1;
        unsigned IAA     :  1;
        unsigned ASE     :  1;
        unsigned PSE     :  1;
        unsigned FS1     :  1;
        unsigned FS0     :  1;
        unsigned RST     :  1;
        unsigned RS      :  1;
    } B;
} hw_usbctrl_usbcmd_t;
#endif


//
// constants & macros for entire HW_USBCTRL_USBCMD register
//

#define HW_USBCTRL_USBCMD_ADDR      (REGS_USBCTRL_BASE + 0x00000140)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_USBCMD           (*(volatile hw_usbctrl_usbcmd_t *) HW_USBCTRL_USBCMD_ADDR)
#define HW_USBCTRL_USBCMD_RD()      (HW_USBCTRL_USBCMD.U)
#define HW_USBCTRL_USBCMD_WR(v)     (HW_USBCTRL_USBCMD.U = (v))
#define HW_USBCTRL_USBCMD_SET(v)    (HW_USBCTRL_USBCMD_WR(HW_USBCTRL_USBCMD_RD() |  (v)))
#define HW_USBCTRL_USBCMD_CLR(v)    (HW_USBCTRL_USBCMD_WR(HW_USBCTRL_USBCMD_RD() & ~(v)))
#define HW_USBCTRL_USBCMD_TOG(v)    (HW_USBCTRL_USBCMD_WR(HW_USBCTRL_USBCMD_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_USBCMD bitfields
//

//--- Register HW_USBCTRL_USBCMD, field RS

#define BP_USBCTRL_USBCMD_RS      0
#define BM_USBCTRL_USBCMD_RS      0x00000001

#define BF_USBCTRL_USBCMD_RS(v)   (((v) << 0) & BM_USBCTRL_USBCMD_RS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_RS(v)   BF_CS1(USBCTRL_USBCMD, RS, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field RST

#define BP_USBCTRL_USBCMD_RST      1
#define BM_USBCTRL_USBCMD_RST      0x00000002

#define BF_USBCTRL_USBCMD_RST(v)   (((v) << 1) & BM_USBCTRL_USBCMD_RST)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_RST(v)   BF_CS1(USBCTRL_USBCMD, RST, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field FS0

#define BP_USBCTRL_USBCMD_FS0      2
#define BM_USBCTRL_USBCMD_FS0      0x00000004

#define BF_USBCTRL_USBCMD_FS0(v)   (((v) << 2) & BM_USBCTRL_USBCMD_FS0)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_FS0(v)   BF_CS1(USBCTRL_USBCMD, FS0, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field FS1

#define BP_USBCTRL_USBCMD_FS1      3
#define BM_USBCTRL_USBCMD_FS1      0x00000008

#define BF_USBCTRL_USBCMD_FS1(v)   (((v) << 3) & BM_USBCTRL_USBCMD_FS1)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_FS1(v)   BF_CS1(USBCTRL_USBCMD, FS1, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field PSE

#define BP_USBCTRL_USBCMD_PSE      4
#define BM_USBCTRL_USBCMD_PSE      0x00000010

#define BF_USBCTRL_USBCMD_PSE(v)   (((v) << 4) & BM_USBCTRL_USBCMD_PSE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_PSE(v)   BF_CS1(USBCTRL_USBCMD, PSE, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field ASE

#define BP_USBCTRL_USBCMD_ASE      5
#define BM_USBCTRL_USBCMD_ASE      0x00000020

#define BF_USBCTRL_USBCMD_ASE(v)   (((v) << 5) & BM_USBCTRL_USBCMD_ASE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_ASE(v)   BF_CS1(USBCTRL_USBCMD, ASE, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field IAA

#define BP_USBCTRL_USBCMD_IAA      6
#define BM_USBCTRL_USBCMD_IAA      0x00000040

#define BF_USBCTRL_USBCMD_IAA(v)   (((v) << 6) & BM_USBCTRL_USBCMD_IAA)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_IAA(v)   BF_CS1(USBCTRL_USBCMD, IAA, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field LR

#define BP_USBCTRL_USBCMD_LR      7
#define BM_USBCTRL_USBCMD_LR      0x00000080

#define BF_USBCTRL_USBCMD_LR(v)   (((v) << 7) & BM_USBCTRL_USBCMD_LR)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_LR(v)   BF_CS1(USBCTRL_USBCMD, LR, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field ASP0

#define BP_USBCTRL_USBCMD_ASP0      8
#define BM_USBCTRL_USBCMD_ASP0      0x00000100

#define BF_USBCTRL_USBCMD_ASP0(v)   (((v) << 8) & BM_USBCTRL_USBCMD_ASP0)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_ASP0(v)   BF_CS1(USBCTRL_USBCMD, ASP0, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field ASP1

#define BP_USBCTRL_USBCMD_ASP1      9
#define BM_USBCTRL_USBCMD_ASP1      0x00000200

#define BF_USBCTRL_USBCMD_ASP1(v)   (((v) << 9) & BM_USBCTRL_USBCMD_ASP1)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_ASP1(v)   BF_CS1(USBCTRL_USBCMD, ASP1, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field ASPE

#define BP_USBCTRL_USBCMD_ASPE      11
#define BM_USBCTRL_USBCMD_ASPE      0x00000800

#define BF_USBCTRL_USBCMD_ASPE(v)   (((v) << 11) & BM_USBCTRL_USBCMD_ASPE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_ASPE(v)   BF_CS1(USBCTRL_USBCMD, ASPE, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field FS2

#define BP_USBCTRL_USBCMD_FS2      15
#define BM_USBCTRL_USBCMD_FS2      0x00008000

#define BF_USBCTRL_USBCMD_FS2(v)   (((v) << 15) & BM_USBCTRL_USBCMD_FS2)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_FS2(v)   BF_CS1(USBCTRL_USBCMD, FS2, v)
#endif

//--- Register HW_USBCTRL_USBCMD, field ITC

#define BP_USBCTRL_USBCMD_ITC      16
#define BM_USBCTRL_USBCMD_ITC      0x00FF0000

#define BF_USBCTRL_USBCMD_ITC(v)   (((v) << 16) & BM_USBCTRL_USBCMD_ITC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBCMD_ITC(v)   (HW_USBCTRL_USBCMD.B.ITC = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_USBSTS - USB CTRL INTR STATUS
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD3  : 15;
        unsigned NAKI    :  1;
        unsigned AS      :  1;
        unsigned PS      :  1;
        unsigned RCL     :  1;
        unsigned HCH     :  1;
        unsigned RSRVD2  :  1;
        unsigned ULPII   :  1;
        unsigned RSRVD1  :  1;
        unsigned SLI     :  1;
        unsigned SRI     :  1;
        unsigned URI     :  1;
        unsigned AAI     :  1;
        unsigned SEI     :  1;
        unsigned FRI     :  1;
        unsigned PCI     :  1;
        unsigned UEI     :  1;
        unsigned UI      :  1;
    } B;
} hw_usbctrl_usbsts_t;
#endif


//
// constants & macros for entire HW_USBCTRL_USBSTS register
//

#define HW_USBCTRL_USBSTS_ADDR      (REGS_USBCTRL_BASE + 0x00000144)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_USBSTS           (*(volatile hw_usbctrl_usbsts_t *) HW_USBCTRL_USBSTS_ADDR)
#define HW_USBCTRL_USBSTS_RD()      (HW_USBCTRL_USBSTS.U)
#define HW_USBCTRL_USBSTS_WR(v)     (HW_USBCTRL_USBSTS.U = (v))
#define HW_USBCTRL_USBSTS_SET(v)    (HW_USBCTRL_USBSTS_WR(HW_USBCTRL_USBSTS_RD() |  (v)))
#define HW_USBCTRL_USBSTS_CLR(v)    (HW_USBCTRL_USBSTS_WR(HW_USBCTRL_USBSTS_RD() & ~(v)))
#define HW_USBCTRL_USBSTS_TOG(v)    (HW_USBCTRL_USBSTS_WR(HW_USBCTRL_USBSTS_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_USBSTS bitfields
//

//--- Register HW_USBCTRL_USBSTS, field UI

#define BP_USBCTRL_USBSTS_UI      0
#define BM_USBCTRL_USBSTS_UI      0x00000001

#define BF_USBCTRL_USBSTS_UI(v)   (((v) << 0) & BM_USBCTRL_USBSTS_UI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_UI(v)   BF_CS1(USBCTRL_USBSTS, UI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field UEI

#define BP_USBCTRL_USBSTS_UEI      1
#define BM_USBCTRL_USBSTS_UEI      0x00000002

#define BF_USBCTRL_USBSTS_UEI(v)   (((v) << 1) & BM_USBCTRL_USBSTS_UEI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_UEI(v)   BF_CS1(USBCTRL_USBSTS, UEI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field PCI

#define BP_USBCTRL_USBSTS_PCI      2
#define BM_USBCTRL_USBSTS_PCI      0x00000004

#define BF_USBCTRL_USBSTS_PCI(v)   (((v) << 2) & BM_USBCTRL_USBSTS_PCI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_PCI(v)   BF_CS1(USBCTRL_USBSTS, PCI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field FRI

#define BP_USBCTRL_USBSTS_FRI      3
#define BM_USBCTRL_USBSTS_FRI      0x00000008

#define BF_USBCTRL_USBSTS_FRI(v)   (((v) << 3) & BM_USBCTRL_USBSTS_FRI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_FRI(v)   BF_CS1(USBCTRL_USBSTS, FRI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field SEI

#define BP_USBCTRL_USBSTS_SEI      4
#define BM_USBCTRL_USBSTS_SEI      0x00000010

#define BF_USBCTRL_USBSTS_SEI(v)   (((v) << 4) & BM_USBCTRL_USBSTS_SEI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_SEI(v)   BF_CS1(USBCTRL_USBSTS, SEI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field AAI

#define BP_USBCTRL_USBSTS_AAI      5
#define BM_USBCTRL_USBSTS_AAI      0x00000020

#define BF_USBCTRL_USBSTS_AAI(v)   (((v) << 5) & BM_USBCTRL_USBSTS_AAI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_AAI(v)   BF_CS1(USBCTRL_USBSTS, AAI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field URI

#define BP_USBCTRL_USBSTS_URI      6
#define BM_USBCTRL_USBSTS_URI      0x00000040

#define BF_USBCTRL_USBSTS_URI(v)   (((v) << 6) & BM_USBCTRL_USBSTS_URI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_URI(v)   BF_CS1(USBCTRL_USBSTS, URI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field SRI

#define BP_USBCTRL_USBSTS_SRI      7
#define BM_USBCTRL_USBSTS_SRI      0x00000080

#define BF_USBCTRL_USBSTS_SRI(v)   (((v) << 7) & BM_USBCTRL_USBSTS_SRI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_SRI(v)   BF_CS1(USBCTRL_USBSTS, SRI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field SLI

#define BP_USBCTRL_USBSTS_SLI      8
#define BM_USBCTRL_USBSTS_SLI      0x00000100

#define BF_USBCTRL_USBSTS_SLI(v)   (((v) << 8) & BM_USBCTRL_USBSTS_SLI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_SLI(v)   BF_CS1(USBCTRL_USBSTS, SLI, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field ULPII

#define BP_USBCTRL_USBSTS_ULPII      10
#define BM_USBCTRL_USBSTS_ULPII      0x00000400

#define BF_USBCTRL_USBSTS_ULPII(v)   (((v) << 10) & BM_USBCTRL_USBSTS_ULPII)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_ULPII(v)   BF_CS1(USBCTRL_USBSTS, ULPII, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field HCH

#define BP_USBCTRL_USBSTS_HCH      12
#define BM_USBCTRL_USBSTS_HCH      0x00001000

#define BF_USBCTRL_USBSTS_HCH(v)   (((v) << 12) & BM_USBCTRL_USBSTS_HCH)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBSTS_HCH(v)   BF_CS1(USBCTRL_USBSTS, HCH, v)
#endif

//--- Register HW_USBCTRL_USBSTS, field RCL

#define BP_USBCTRL_USBSTS_RCL      13
#define BM_USBCTRL_USBSTS_RCL      0x00002000

#define BF_USBCTRL_USBSTS_RCL(v)   (((v) << 13) & BM_USBCTRL_USBSTS_RCL)

//--- Register HW_USBCTRL_USBSTS, field PS

#define BP_USBCTRL_USBSTS_PS      14
#define BM_USBCTRL_USBSTS_PS      0x00004000

#define BF_USBCTRL_USBSTS_PS(v)   (((v) << 14) & BM_USBCTRL_USBSTS_PS)

//--- Register HW_USBCTRL_USBSTS, field AS

#define BP_USBCTRL_USBSTS_AS      15
#define BM_USBCTRL_USBSTS_AS      0x00008000

#define BF_USBCTRL_USBSTS_AS(v)   (((v) << 15) & BM_USBCTRL_USBSTS_AS)

//--- Register HW_USBCTRL_USBSTS, field NAKI

#define BP_USBCTRL_USBSTS_NAKI      16
#define BM_USBCTRL_USBSTS_NAKI      0x00010000

#define BF_USBCTRL_USBSTS_NAKI(v)   (((v) << 16) & BM_USBCTRL_USBSTS_NAKI)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_USBINTR - USB CTRL INTR ENABLES
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD3  : 15;
        unsigned NAKE    :  1;
        unsigned RSRVD2  :  5;
        unsigned ULPIE   :  1;
        unsigned RSRVD1  :  1;
        unsigned SLE     :  1;
        unsigned SRE     :  1;
        unsigned URE     :  1;
        unsigned AAE     :  1;
        unsigned SEE     :  1;
        unsigned FRE     :  1;
        unsigned PCE     :  1;
        unsigned UEE     :  1;
        unsigned UE      :  1;
    } B;
} hw_usbctrl_usbintr_t;
#endif


//
// constants & macros for entire HW_USBCTRL_USBINTR register
//

#define HW_USBCTRL_USBINTR_ADDR      (REGS_USBCTRL_BASE + 0x00000148)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_USBINTR           (*(volatile hw_usbctrl_usbintr_t *) HW_USBCTRL_USBINTR_ADDR)
#define HW_USBCTRL_USBINTR_RD()      (HW_USBCTRL_USBINTR.U)
#define HW_USBCTRL_USBINTR_WR(v)     (HW_USBCTRL_USBINTR.U = (v))
#define HW_USBCTRL_USBINTR_SET(v)    (HW_USBCTRL_USBINTR_WR(HW_USBCTRL_USBINTR_RD() |  (v)))
#define HW_USBCTRL_USBINTR_CLR(v)    (HW_USBCTRL_USBINTR_WR(HW_USBCTRL_USBINTR_RD() & ~(v)))
#define HW_USBCTRL_USBINTR_TOG(v)    (HW_USBCTRL_USBINTR_WR(HW_USBCTRL_USBINTR_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_USBINTR bitfields
//

//--- Register HW_USBCTRL_USBINTR, field UE

#define BP_USBCTRL_USBINTR_UE      0
#define BM_USBCTRL_USBINTR_UE      0x00000001

#define BF_USBCTRL_USBINTR_UE(v)   (((v) << 0) & BM_USBCTRL_USBINTR_UE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_UE(v)   BF_CS1(USBCTRL_USBINTR, UE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field UEE

#define BP_USBCTRL_USBINTR_UEE      1
#define BM_USBCTRL_USBINTR_UEE      0x00000002

#define BF_USBCTRL_USBINTR_UEE(v)   (((v) << 1) & BM_USBCTRL_USBINTR_UEE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_UEE(v)   BF_CS1(USBCTRL_USBINTR, UEE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field PCE

#define BP_USBCTRL_USBINTR_PCE      2
#define BM_USBCTRL_USBINTR_PCE      0x00000004

#define BF_USBCTRL_USBINTR_PCE(v)   (((v) << 2) & BM_USBCTRL_USBINTR_PCE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_PCE(v)   BF_CS1(USBCTRL_USBINTR, PCE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field FRE

#define BP_USBCTRL_USBINTR_FRE      3
#define BM_USBCTRL_USBINTR_FRE      0x00000008

#define BF_USBCTRL_USBINTR_FRE(v)   (((v) << 3) & BM_USBCTRL_USBINTR_FRE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_FRE(v)   BF_CS1(USBCTRL_USBINTR, FRE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field SEE

#define BP_USBCTRL_USBINTR_SEE      4
#define BM_USBCTRL_USBINTR_SEE      0x00000010

#define BF_USBCTRL_USBINTR_SEE(v)   (((v) << 4) & BM_USBCTRL_USBINTR_SEE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_SEE(v)   BF_CS1(USBCTRL_USBINTR, SEE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field AAE

#define BP_USBCTRL_USBINTR_AAE      5
#define BM_USBCTRL_USBINTR_AAE      0x00000020

#define BF_USBCTRL_USBINTR_AAE(v)   (((v) << 5) & BM_USBCTRL_USBINTR_AAE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_AAE(v)   BF_CS1(USBCTRL_USBINTR, AAE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field URE

#define BP_USBCTRL_USBINTR_URE      6
#define BM_USBCTRL_USBINTR_URE      0x00000040

#define BF_USBCTRL_USBINTR_URE(v)   (((v) << 6) & BM_USBCTRL_USBINTR_URE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_URE(v)   BF_CS1(USBCTRL_USBINTR, URE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field SRE

#define BP_USBCTRL_USBINTR_SRE      7
#define BM_USBCTRL_USBINTR_SRE      0x00000080

#define BF_USBCTRL_USBINTR_SRE(v)   (((v) << 7) & BM_USBCTRL_USBINTR_SRE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_SRE(v)   BF_CS1(USBCTRL_USBINTR, SRE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field SLE

#define BP_USBCTRL_USBINTR_SLE      8
#define BM_USBCTRL_USBINTR_SLE      0x00000100

#define BF_USBCTRL_USBINTR_SLE(v)   (((v) << 8) & BM_USBCTRL_USBINTR_SLE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_SLE(v)   BF_CS1(USBCTRL_USBINTR, SLE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field ULPIE

#define BP_USBCTRL_USBINTR_ULPIE      10
#define BM_USBCTRL_USBINTR_ULPIE      0x00000400

#define BF_USBCTRL_USBINTR_ULPIE(v)   (((v) << 10) & BM_USBCTRL_USBINTR_ULPIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_ULPIE(v)   BF_CS1(USBCTRL_USBINTR, ULPIE, v)
#endif

//--- Register HW_USBCTRL_USBINTR, field NAKE

#define BP_USBCTRL_USBINTR_NAKE      16
#define BM_USBCTRL_USBINTR_NAKE      0x00010000

#define BF_USBCTRL_USBINTR_NAKE(v)   (((v) << 16) & BM_USBCTRL_USBINTR_NAKE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBINTR_NAKE(v)   BF_CS1(USBCTRL_USBINTR, NAKE, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_FRINDEX - USB CTRL FRAME INDEX
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned UINDEX     :  3;
        unsigned LISTINDEX  : 11;
        unsigned RESVRD     : 18;
    } B;
} hw_usbctrl_frindex_t;
#endif


//
// constants & macros for entire HW_USBCTRL_FRINDEX register
//

#define HW_USBCTRL_FRINDEX_ADDR      (REGS_USBCTRL_BASE + 0x0000014C)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_FRINDEX           (*(volatile hw_usbctrl_frindex_t *) HW_USBCTRL_FRINDEX_ADDR)
#define HW_USBCTRL_FRINDEX_RD()      (HW_USBCTRL_FRINDEX.U)
#define HW_USBCTRL_FRINDEX_WR(v)     (HW_USBCTRL_FRINDEX.U = (v))
#define HW_USBCTRL_FRINDEX_SET(v)    (HW_USBCTRL_FRINDEX_WR(HW_USBCTRL_FRINDEX_RD() |  (v)))
#define HW_USBCTRL_FRINDEX_CLR(v)    (HW_USBCTRL_FRINDEX_WR(HW_USBCTRL_FRINDEX_RD() & ~(v)))
#define HW_USBCTRL_FRINDEX_TOG(v)    (HW_USBCTRL_FRINDEX_WR(HW_USBCTRL_FRINDEX_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_FRINDEX bitfields
//

//--- Register HW_USBCTRL_FRINDEX, field LISTINDEX

#define BP_USBCTRL_FRINDEX_LISTINDEX      3
#define BM_USBCTRL_FRINDEX_LISTINDEX      0x00003FF8

#define BF_USBCTRL_FRINDEX_LISTINDEX(v)   (((v) << 3) & BM_USBCTRL_FRINDEX_LISTINDEX)

//--- Register HW_USBCTRL_FRINDEX, field UINDEX

#define BP_USBCTRL_FRINDEX_UINDEX      0
#define BM_USBCTRL_FRINDEX_UINDEX      0x00000007

#define BF_USBCTRL_FRINDEX_UINDEX(v)   (((v) << 0) & BM_USBCTRL_FRINDEX_UINDEX)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_FRINDEX_UINDEX(v)   BF_CS1(USBCTRL_FRINDEX, UINDEX, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_CTRLDSSEGMENT - USB CTRL DS-SEG
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  EMPTY;
    } B;
} hw_usbctrl_ctrldssegment_t;
#endif


//
// constants & macros for entire HW_USBCTRL_CTRLDSSEGMENT register
//

#define HW_USBCTRL_CTRLDSSEGMENT_ADDR      (REGS_USBCTRL_BASE + 0x00000150)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_CTRLDSSEGMENT           (*(volatile hw_usbctrl_ctrldssegment_t *) HW_USBCTRL_CTRLDSSEGMENT_ADDR)
#define HW_USBCTRL_CTRLDSSEGMENT_RD()      (HW_USBCTRL_CTRLDSSEGMENT.U)
#define HW_USBCTRL_CTRLDSSEGMENT_WR(v)     (HW_USBCTRL_CTRLDSSEGMENT.U = (v))
#define HW_USBCTRL_CTRLDSSEGMENT_SET(v)    (HW_USBCTRL_CTRLDSSEGMENT_WR(HW_USBCTRL_CTRLDSSEGMENT_RD() |  (v)))
#define HW_USBCTRL_CTRLDSSEGMENT_CLR(v)    (HW_USBCTRL_CTRLDSSEGMENT_WR(HW_USBCTRL_CTRLDSSEGMENT_RD() & ~(v)))
#define HW_USBCTRL_CTRLDSSEGMENT_TOG(v)    (HW_USBCTRL_CTRLDSSEGMENT_WR(HW_USBCTRL_CTRLDSSEGMENT_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_CTRLDSSEGMENT bitfields
//

//--- Register HW_USBCTRL_CTRLDSSEGMENT, field EMPTY

#define BP_USBCTRL_CTRLDSSEGMENT_EMPTY      0
#define BM_USBCTRL_CTRLDSSEGMENT_EMPTY      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_CTRLDSSEGMENT_EMPTY(v)   ((reg32_t) v)
#else
#define BF_USBCTRL_CTRLDSSEGMENT_EMPTY(v)   (v)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_CTRLDSSEGMENT_EMPTY(v)   (HW_USBCTRL_CTRLDSSEGMENT.B.EMPTY = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_PERIODICLISTBASE - USB CTRL PERIODIC-LIST-BASE
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RESVRD    : 12;
        unsigned BASEADDR  : 20;
    } B;
} hw_usbctrl_periodiclistbase_t;
#endif


//
// constants & macros for entire HW_USBCTRL_PERIODICLISTBASE register
//

#define HW_USBCTRL_PERIODICLISTBASE_ADDR      (REGS_USBCTRL_BASE + 0x00000154)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_PERIODICLISTBASE           (*(volatile hw_usbctrl_periodiclistbase_t *) HW_USBCTRL_PERIODICLISTBASE_ADDR)
#define HW_USBCTRL_PERIODICLISTBASE_RD()      (HW_USBCTRL_PERIODICLISTBASE.U)
#define HW_USBCTRL_PERIODICLISTBASE_WR(v)     (HW_USBCTRL_PERIODICLISTBASE.U = (v))
#define HW_USBCTRL_PERIODICLISTBASE_SET(v)    (HW_USBCTRL_PERIODICLISTBASE_WR(HW_USBCTRL_PERIODICLISTBASE_RD() |  (v)))
#define HW_USBCTRL_PERIODICLISTBASE_CLR(v)    (HW_USBCTRL_PERIODICLISTBASE_WR(HW_USBCTRL_PERIODICLISTBASE_RD() & ~(v)))
#define HW_USBCTRL_PERIODICLISTBASE_TOG(v)    (HW_USBCTRL_PERIODICLISTBASE_WR(HW_USBCTRL_PERIODICLISTBASE_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_PERIODICLISTBASE bitfields
//

//--- Register HW_USBCTRL_PERIODICLISTBASE, field BASEADDR

#define BP_USBCTRL_PERIODICLISTBASE_BASEADDR      12
#define BM_USBCTRL_PERIODICLISTBASE_BASEADDR      0xFFFFF000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_PERIODICLISTBASE_BASEADDR(v)   ((((reg32_t) v) << 12) & BM_USBCTRL_PERIODICLISTBASE_BASEADDR)
#else
#define BF_USBCTRL_PERIODICLISTBASE_BASEADDR(v)   (((v) << 12) & BM_USBCTRL_PERIODICLISTBASE_BASEADDR)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PERIODICLISTBASE_BASEADDR(v)   BF_CS1(USBCTRL_PERIODICLISTBASE, BASEADDR, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ASYNCLISTADDR - USB CTRL ASYNC-LIST-ADDR
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RESVRD   :  5;
        unsigned ASYBASE  : 27;
    } B;
} hw_usbctrl_asynclistaddr_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ASYNCLISTADDR register
//

#define HW_USBCTRL_ASYNCLISTADDR_ADDR      (REGS_USBCTRL_BASE + 0x00000158)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ASYNCLISTADDR           (*(volatile hw_usbctrl_asynclistaddr_t *) HW_USBCTRL_ASYNCLISTADDR_ADDR)
#define HW_USBCTRL_ASYNCLISTADDR_RD()      (HW_USBCTRL_ASYNCLISTADDR.U)
#define HW_USBCTRL_ASYNCLISTADDR_WR(v)     (HW_USBCTRL_ASYNCLISTADDR.U = (v))
#define HW_USBCTRL_ASYNCLISTADDR_SET(v)    (HW_USBCTRL_ASYNCLISTADDR_WR(HW_USBCTRL_ASYNCLISTADDR_RD() |  (v)))
#define HW_USBCTRL_ASYNCLISTADDR_CLR(v)    (HW_USBCTRL_ASYNCLISTADDR_WR(HW_USBCTRL_ASYNCLISTADDR_RD() & ~(v)))
#define HW_USBCTRL_ASYNCLISTADDR_TOG(v)    (HW_USBCTRL_ASYNCLISTADDR_WR(HW_USBCTRL_ASYNCLISTADDR_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_ASYNCLISTADDR bitfields
//

//--- Register HW_USBCTRL_ASYNCLISTADDR, field ASYBASE

#define BP_USBCTRL_ASYNCLISTADDR_ASYBASE      5
#define BM_USBCTRL_ASYNCLISTADDR_ASYBASE      0xFFFFFFE0

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_ASYNCLISTADDR_ASYBASE(v)   ((((reg32_t) v) << 5) & BM_USBCTRL_ASYNCLISTADDR_ASYBASE)
#else
#define BF_USBCTRL_ASYNCLISTADDR_ASYBASE(v)   (((v) << 5) & BM_USBCTRL_ASYNCLISTADDR_ASYBASE)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ASYNCLISTADDR_ASYBASE(v)   BF_CS1(USBCTRL_ASYNCLISTADDR, ASYBASE, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_TTCTRL - USB CTRL TTCTRL
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD2  : 24;
        unsigned TTHA    :  7;
        unsigned RSRVD1  :  1;
    } B;
} hw_usbctrl_ttctrl_t;
#endif


//
// constants & macros for entire HW_USBCTRL_TTCTRL register
//

#define HW_USBCTRL_TTCTRL_ADDR      (REGS_USBCTRL_BASE + 0x0000015C)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_TTCTRL           (*(volatile hw_usbctrl_ttctrl_t *) HW_USBCTRL_TTCTRL_ADDR)
#define HW_USBCTRL_TTCTRL_RD()      (HW_USBCTRL_TTCTRL.U)
#define HW_USBCTRL_TTCTRL_WR(v)     (HW_USBCTRL_TTCTRL.U = (v))
#define HW_USBCTRL_TTCTRL_SET(v)    (HW_USBCTRL_TTCTRL_WR(HW_USBCTRL_TTCTRL_RD() |  (v)))
#define HW_USBCTRL_TTCTRL_CLR(v)    (HW_USBCTRL_TTCTRL_WR(HW_USBCTRL_TTCTRL_RD() & ~(v)))
#define HW_USBCTRL_TTCTRL_TOG(v)    (HW_USBCTRL_TTCTRL_WR(HW_USBCTRL_TTCTRL_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_TTCTRL bitfields
//

//--- Register HW_USBCTRL_TTCTRL, field TTHA

#define BP_USBCTRL_TTCTRL_TTHA      24
#define BM_USBCTRL_TTCTRL_TTHA      0x7F000000

#define BF_USBCTRL_TTCTRL_TTHA(v)   (((v) << 24) & BM_USBCTRL_TTCTRL_TTHA)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_TTCTRL_TTHA(v)   BF_CS1(USBCTRL_TTCTRL, TTHA, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_BURSTSIZE - USB CTRL BURST-SIZE
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   RX;
        reg8_t   TX;
        reg16_t  RESVRD;
    } B;
} hw_usbctrl_burstsize_t;
#endif


//
// constants & macros for entire HW_USBCTRL_BURSTSIZE register
//

#define HW_USBCTRL_BURSTSIZE_ADDR      (REGS_USBCTRL_BASE + 0x00000160)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_BURSTSIZE           (*(volatile hw_usbctrl_burstsize_t *) HW_USBCTRL_BURSTSIZE_ADDR)
#define HW_USBCTRL_BURSTSIZE_RD()      (HW_USBCTRL_BURSTSIZE.U)
#define HW_USBCTRL_BURSTSIZE_WR(v)     (HW_USBCTRL_BURSTSIZE.U = (v))
#define HW_USBCTRL_BURSTSIZE_SET(v)    (HW_USBCTRL_BURSTSIZE_WR(HW_USBCTRL_BURSTSIZE_RD() |  (v)))
#define HW_USBCTRL_BURSTSIZE_CLR(v)    (HW_USBCTRL_BURSTSIZE_WR(HW_USBCTRL_BURSTSIZE_RD() & ~(v)))
#define HW_USBCTRL_BURSTSIZE_TOG(v)    (HW_USBCTRL_BURSTSIZE_WR(HW_USBCTRL_BURSTSIZE_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_BURSTSIZE bitfields
//

//--- Register HW_USBCTRL_BURSTSIZE, field TX

#define BP_USBCTRL_BURSTSIZE_TX      8
#define BM_USBCTRL_BURSTSIZE_TX      0x0000FF00

#define BF_USBCTRL_BURSTSIZE_TX(v)   (((v) << 8) & BM_USBCTRL_BURSTSIZE_TX)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_BURSTSIZE_TX(v)   (HW_USBCTRL_BURSTSIZE.B.TX = (v))
#endif

//--- Register HW_USBCTRL_BURSTSIZE, field RX

#define BP_USBCTRL_BURSTSIZE_RX      0
#define BM_USBCTRL_BURSTSIZE_RX      0x000000FF

#define BF_USBCTRL_BURSTSIZE_RX(v)   (((v) << 0) & BM_USBCTRL_BURSTSIZE_RX)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_BURSTSIZE_RX(v)   (HW_USBCTRL_BURSTSIZE.B.RX = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_TXFILLTUNING - USB CTRL TXFILL TUNING
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   TXSCHOH;
        unsigned TXSCHEALTH   :  5;
        unsigned RSRVD2       :  3;
        unsigned TXFIFOTHRES  :  6;
        unsigned RSRVD1       : 10;
    } B;
} hw_usbctrl_txfilltuning_t;
#endif


//
// constants & macros for entire HW_USBCTRL_TXFILLTUNING register
//

#define HW_USBCTRL_TXFILLTUNING_ADDR      (REGS_USBCTRL_BASE + 0x00000164)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_TXFILLTUNING           (*(volatile hw_usbctrl_txfilltuning_t *) HW_USBCTRL_TXFILLTUNING_ADDR)
#define HW_USBCTRL_TXFILLTUNING_RD()      (HW_USBCTRL_TXFILLTUNING.U)
#define HW_USBCTRL_TXFILLTUNING_WR(v)     (HW_USBCTRL_TXFILLTUNING.U = (v))
#define HW_USBCTRL_TXFILLTUNING_SET(v)    (HW_USBCTRL_TXFILLTUNING_WR(HW_USBCTRL_TXFILLTUNING_RD() |  (v)))
#define HW_USBCTRL_TXFILLTUNING_CLR(v)    (HW_USBCTRL_TXFILLTUNING_WR(HW_USBCTRL_TXFILLTUNING_RD() & ~(v)))
#define HW_USBCTRL_TXFILLTUNING_TOG(v)    (HW_USBCTRL_TXFILLTUNING_WR(HW_USBCTRL_TXFILLTUNING_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_TXFILLTUNING bitfields
//

//--- Register HW_USBCTRL_TXFILLTUNING, field TXFIFOTHRES

#define BP_USBCTRL_TXFILLTUNING_TXFIFOTHRES      16
#define BM_USBCTRL_TXFILLTUNING_TXFIFOTHRES      0x003F0000

#define BF_USBCTRL_TXFILLTUNING_TXFIFOTHRES(v)   (((v) << 16) & BM_USBCTRL_TXFILLTUNING_TXFIFOTHRES)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_TXFILLTUNING_TXFIFOTHRES(v)   BF_CS1(USBCTRL_TXFILLTUNING, TXFIFOTHRES, v)
#endif

//--- Register HW_USBCTRL_TXFILLTUNING, field TXSCHEALTH

#define BP_USBCTRL_TXFILLTUNING_TXSCHEALTH      8
#define BM_USBCTRL_TXFILLTUNING_TXSCHEALTH      0x00001F00

#define BF_USBCTRL_TXFILLTUNING_TXSCHEALTH(v)   (((v) << 8) & BM_USBCTRL_TXFILLTUNING_TXSCHEALTH)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_TXFILLTUNING_TXSCHEALTH(v)   BF_CS1(USBCTRL_TXFILLTUNING, TXSCHEALTH, v)
#endif

//--- Register HW_USBCTRL_TXFILLTUNING, field TXSCHOH

#define BP_USBCTRL_TXFILLTUNING_TXSCHOH      0
#define BM_USBCTRL_TXFILLTUNING_TXSCHOH      0x000000FF

#define BF_USBCTRL_TXFILLTUNING_TXSCHOH(v)   (((v) << 0) & BM_USBCTRL_TXFILLTUNING_TXSCHOH)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_TXFILLTUNING_TXSCHOH(v)   (HW_USBCTRL_TXFILLTUNING.B.TXSCHOH = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_TXTTFILLTUNING - USB CTRL TXTTFILL TUNING
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  EMPTY;
    } B;
} hw_usbctrl_txttfilltuning_t;
#endif


//
// constants & macros for entire HW_USBCTRL_TXTTFILLTUNING register
//

#define HW_USBCTRL_TXTTFILLTUNING_ADDR      (REGS_USBCTRL_BASE + 0x00000168)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_TXTTFILLTUNING           (*(volatile hw_usbctrl_txttfilltuning_t *) HW_USBCTRL_TXTTFILLTUNING_ADDR)
#define HW_USBCTRL_TXTTFILLTUNING_RD()      (HW_USBCTRL_TXTTFILLTUNING.U)
#define HW_USBCTRL_TXTTFILLTUNING_WR(v)     (HW_USBCTRL_TXTTFILLTUNING.U = (v))
#define HW_USBCTRL_TXTTFILLTUNING_SET(v)    (HW_USBCTRL_TXTTFILLTUNING_WR(HW_USBCTRL_TXTTFILLTUNING_RD() |  (v)))
#define HW_USBCTRL_TXTTFILLTUNING_CLR(v)    (HW_USBCTRL_TXTTFILLTUNING_WR(HW_USBCTRL_TXTTFILLTUNING_RD() & ~(v)))
#define HW_USBCTRL_TXTTFILLTUNING_TOG(v)    (HW_USBCTRL_TXTTFILLTUNING_WR(HW_USBCTRL_TXTTFILLTUNING_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_TXTTFILLTUNING bitfields
//

//--- Register HW_USBCTRL_TXTTFILLTUNING, field EMPTY

#define BP_USBCTRL_TXTTFILLTUNING_EMPTY      0
#define BM_USBCTRL_TXTTFILLTUNING_EMPTY      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_TXTTFILLTUNING_EMPTY(v)   ((reg32_t) v)
#else
#define BF_USBCTRL_TXTTFILLTUNING_EMPTY(v)   (v)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_TXTTFILLTUNING_EMPTY(v)   (HW_USBCTRL_TXTTFILLTUNING.B.EMPTY = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ULPI - USB CTRL ULPI
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg8_t   DATAWR;
        reg8_t   DATARD;
        reg8_t   ADDR;
        unsigned PORT    :  3;
        unsigned SYNC    :  1;
        unsigned ERROR   :  1;
        unsigned RDWR    :  1;
        unsigned RUN     :  1;
        unsigned WAKEUP  :  1;
    } B;
} hw_usbctrl_ulpi_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ULPI register
//

#define HW_USBCTRL_ULPI_ADDR      (REGS_USBCTRL_BASE + 0x00000170)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ULPI           (*(volatile hw_usbctrl_ulpi_t *) HW_USBCTRL_ULPI_ADDR)
#define HW_USBCTRL_ULPI_RD()      (HW_USBCTRL_ULPI.U)
#endif


//
// constants & macros for individual HW_USBCTRL_ULPI bitfields
//

//--- Register HW_USBCTRL_ULPI, field WAKEUP

#define BP_USBCTRL_ULPI_WAKEUP      31
#define BM_USBCTRL_ULPI_WAKEUP      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_ULPI_WAKEUP(v)   ((((reg32_t) v) << 31) & BM_USBCTRL_ULPI_WAKEUP)
#else
#define BF_USBCTRL_ULPI_WAKEUP(v)   (((v) << 31) & BM_USBCTRL_ULPI_WAKEUP)
#endif

//--- Register HW_USBCTRL_ULPI, field RUN

#define BP_USBCTRL_ULPI_RUN      30
#define BM_USBCTRL_ULPI_RUN      0x40000000

#define BF_USBCTRL_ULPI_RUN(v)   (((v) << 30) & BM_USBCTRL_ULPI_RUN)

//--- Register HW_USBCTRL_ULPI, field RDWR

#define BP_USBCTRL_ULPI_RDWR      29
#define BM_USBCTRL_ULPI_RDWR      0x20000000

#define BF_USBCTRL_ULPI_RDWR(v)   (((v) << 29) & BM_USBCTRL_ULPI_RDWR)

//--- Register HW_USBCTRL_ULPI, field ERROR

#define BP_USBCTRL_ULPI_ERROR      28
#define BM_USBCTRL_ULPI_ERROR      0x10000000

#define BF_USBCTRL_ULPI_ERROR(v)   (((v) << 28) & BM_USBCTRL_ULPI_ERROR)

//--- Register HW_USBCTRL_ULPI, field SYNC

#define BP_USBCTRL_ULPI_SYNC      27
#define BM_USBCTRL_ULPI_SYNC      0x08000000

#define BF_USBCTRL_ULPI_SYNC(v)   (((v) << 27) & BM_USBCTRL_ULPI_SYNC)

//--- Register HW_USBCTRL_ULPI, field PORT

#define BP_USBCTRL_ULPI_PORT      24
#define BM_USBCTRL_ULPI_PORT      0x07000000

#define BF_USBCTRL_ULPI_PORT(v)   (((v) << 24) & BM_USBCTRL_ULPI_PORT)

//--- Register HW_USBCTRL_ULPI, field ADDR

#define BP_USBCTRL_ULPI_ADDR      16
#define BM_USBCTRL_ULPI_ADDR      0x00FF0000

#define BF_USBCTRL_ULPI_ADDR(v)   (((v) << 16) & BM_USBCTRL_ULPI_ADDR)

//--- Register HW_USBCTRL_ULPI, field DATARD

#define BP_USBCTRL_ULPI_DATARD      8
#define BM_USBCTRL_ULPI_DATARD      0x0000FF00

#define BF_USBCTRL_ULPI_DATARD(v)   (((v) << 8) & BM_USBCTRL_ULPI_DATARD)

//--- Register HW_USBCTRL_ULPI, field DATAWR

#define BP_USBCTRL_ULPI_DATAWR      0
#define BM_USBCTRL_ULPI_DATAWR      0x000000FF

#define BF_USBCTRL_ULPI_DATAWR(v)   (((v) << 0) & BM_USBCTRL_ULPI_DATAWR)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_VFRAME - USB CTRL VFRAME
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg32_t  EMPTY;
    } B;
} hw_usbctrl_vframe_t;
#endif


//
// constants & macros for entire HW_USBCTRL_VFRAME register
//

#define HW_USBCTRL_VFRAME_ADDR      (REGS_USBCTRL_BASE + 0x00000174)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_VFRAME           (*(volatile hw_usbctrl_vframe_t *) HW_USBCTRL_VFRAME_ADDR)
#define HW_USBCTRL_VFRAME_RD()      (HW_USBCTRL_VFRAME.U)
#define HW_USBCTRL_VFRAME_WR(v)     (HW_USBCTRL_VFRAME.U = (v))
#define HW_USBCTRL_VFRAME_SET(v)    (HW_USBCTRL_VFRAME_WR(HW_USBCTRL_VFRAME_RD() |  (v)))
#define HW_USBCTRL_VFRAME_CLR(v)    (HW_USBCTRL_VFRAME_WR(HW_USBCTRL_VFRAME_RD() & ~(v)))
#define HW_USBCTRL_VFRAME_TOG(v)    (HW_USBCTRL_VFRAME_WR(HW_USBCTRL_VFRAME_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_VFRAME bitfields
//

//--- Register HW_USBCTRL_VFRAME, field EMPTY

#define BP_USBCTRL_VFRAME_EMPTY      0
#define BM_USBCTRL_VFRAME_EMPTY      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_VFRAME_EMPTY(v)   ((reg32_t) v)
#else
#define BF_USBCTRL_VFRAME_EMPTY(v)   (v)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_VFRAME_EMPTY(v)   (HW_USBCTRL_VFRAME.B.EMPTY = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_EPNAK - USB CTRL ENDPOINT NAK
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  EPRN;
        reg16_t  EPTN;
    } B;
} hw_usbctrl_epnak_t;
#endif


//
// constants & macros for entire HW_USBCTRL_EPNAK register
//

#define HW_USBCTRL_EPNAK_ADDR      (REGS_USBCTRL_BASE + 0x00000178)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_EPNAK           (*(volatile hw_usbctrl_epnak_t *) HW_USBCTRL_EPNAK_ADDR)
#define HW_USBCTRL_EPNAK_RD()      (HW_USBCTRL_EPNAK.U)
#define HW_USBCTRL_EPNAK_WR(v)     (HW_USBCTRL_EPNAK.U = (v))
#define HW_USBCTRL_EPNAK_SET(v)    (HW_USBCTRL_EPNAK_WR(HW_USBCTRL_EPNAK_RD() |  (v)))
#define HW_USBCTRL_EPNAK_CLR(v)    (HW_USBCTRL_EPNAK_WR(HW_USBCTRL_EPNAK_RD() & ~(v)))
#define HW_USBCTRL_EPNAK_TOG(v)    (HW_USBCTRL_EPNAK_WR(HW_USBCTRL_EPNAK_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_EPNAK bitfields
//

//--- Register HW_USBCTRL_EPNAK, field EPTN

#define BP_USBCTRL_EPNAK_EPTN      16
#define BM_USBCTRL_EPNAK_EPTN      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_EPNAK_EPTN(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_EPNAK_EPTN)
#else
#define BF_USBCTRL_EPNAK_EPTN(v)   (((v) << 16) & BM_USBCTRL_EPNAK_EPTN)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_EPNAK_EPTN(v)   (HW_USBCTRL_EPNAK.B.EPTN = (v))
#endif

//--- Register HW_USBCTRL_EPNAK, field EPRN

#define BP_USBCTRL_EPNAK_EPRN      0
#define BM_USBCTRL_EPNAK_EPRN      0x0000FFFF

#define BF_USBCTRL_EPNAK_EPRN(v)   (((v) << 0) & BM_USBCTRL_EPNAK_EPRN)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_EPNAK_EPRN(v)   (HW_USBCTRL_EPNAK.B.EPRN = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_EPNAKEN - USB CTRL ENDPOINT NAK ENABLES
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  EPRNE;
        reg16_t  EPTNE;
    } B;
} hw_usbctrl_epnaken_t;
#endif


//
// constants & macros for entire HW_USBCTRL_EPNAKEN register
//

#define HW_USBCTRL_EPNAKEN_ADDR      (REGS_USBCTRL_BASE + 0x0000017C)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_EPNAKEN           (*(volatile hw_usbctrl_epnaken_t *) HW_USBCTRL_EPNAKEN_ADDR)
#define HW_USBCTRL_EPNAKEN_RD()      (HW_USBCTRL_EPNAKEN.U)
#define HW_USBCTRL_EPNAKEN_WR(v)     (HW_USBCTRL_EPNAKEN.U = (v))
#define HW_USBCTRL_EPNAKEN_SET(v)    (HW_USBCTRL_EPNAKEN_WR(HW_USBCTRL_EPNAKEN_RD() |  (v)))
#define HW_USBCTRL_EPNAKEN_CLR(v)    (HW_USBCTRL_EPNAKEN_WR(HW_USBCTRL_EPNAKEN_RD() & ~(v)))
#define HW_USBCTRL_EPNAKEN_TOG(v)    (HW_USBCTRL_EPNAKEN_WR(HW_USBCTRL_EPNAKEN_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_EPNAKEN bitfields
//

//--- Register HW_USBCTRL_EPNAKEN, field EPTNE

#define BP_USBCTRL_EPNAKEN_EPTNE      16
#define BM_USBCTRL_EPNAKEN_EPTNE      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_EPNAKEN_EPTNE(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_EPNAKEN_EPTNE)
#else
#define BF_USBCTRL_EPNAKEN_EPTNE(v)   (((v) << 16) & BM_USBCTRL_EPNAKEN_EPTNE)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_EPNAKEN_EPTNE(v)   (HW_USBCTRL_EPNAKEN.B.EPTNE = (v))
#endif

//--- Register HW_USBCTRL_EPNAKEN, field EPRNE

#define BP_USBCTRL_EPNAKEN_EPRNE      0
#define BM_USBCTRL_EPNAKEN_EPRNE      0x0000FFFF

#define BF_USBCTRL_EPNAKEN_EPRNE(v)   (((v) << 0) & BM_USBCTRL_EPNAKEN_EPRNE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_EPNAKEN_EPRNE(v)   (HW_USBCTRL_EPNAKEN.B.EPRNE = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_CONFIGFLAG - USB CTRL CONFIG FLAG
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned FLAG    :  1;
        unsigned RESVRD  : 31;
    } B;
} hw_usbctrl_configflag_t;
#endif


//
// constants & macros for entire HW_USBCTRL_CONFIGFLAG register
//

#define HW_USBCTRL_CONFIGFLAG_ADDR      (REGS_USBCTRL_BASE + 0x00000180)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_CONFIGFLAG           (*(volatile hw_usbctrl_configflag_t *) HW_USBCTRL_CONFIGFLAG_ADDR)
#define HW_USBCTRL_CONFIGFLAG_RD()      (HW_USBCTRL_CONFIGFLAG.U)
#define HW_USBCTRL_CONFIGFLAG_WR(v)     (HW_USBCTRL_CONFIGFLAG.U = (v))
#define HW_USBCTRL_CONFIGFLAG_SET(v)    (HW_USBCTRL_CONFIGFLAG_WR(HW_USBCTRL_CONFIGFLAG_RD() |  (v)))
#define HW_USBCTRL_CONFIGFLAG_CLR(v)    (HW_USBCTRL_CONFIGFLAG_WR(HW_USBCTRL_CONFIGFLAG_RD() & ~(v)))
#define HW_USBCTRL_CONFIGFLAG_TOG(v)    (HW_USBCTRL_CONFIGFLAG_WR(HW_USBCTRL_CONFIGFLAG_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_CONFIGFLAG bitfields
//

//--- Register HW_USBCTRL_CONFIGFLAG, field FLAG

#define BP_USBCTRL_CONFIGFLAG_FLAG      0
#define BM_USBCTRL_CONFIGFLAG_FLAG      0x00000001

#define BF_USBCTRL_CONFIGFLAG_FLAG(v)   (((v) << 0) & BM_USBCTRL_CONFIGFLAG_FLAG)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_CONFIGFLAG_FLAG(v)   BF_CS1(USBCTRL_CONFIGFLAG, FLAG, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_PORTSC1 - USB CTRL PORT1 STATUS/CTRL
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CCS   :  1;
        unsigned CSC   :  1;
        unsigned PE    :  1;
        unsigned PEC   :  1;
        unsigned OCA   :  1;
        unsigned OCC   :  1;
        unsigned FPR   :  1;
        unsigned SUSP  :  1;
        unsigned PR    :  1;
        unsigned HSP   :  1;
        unsigned LS    :  2;
        unsigned PP    :  1;
        unsigned PO    :  1;
        unsigned PIC   :  2;
        unsigned PTC   :  4;
        unsigned WKCN  :  1;
        unsigned WKDS  :  1;
        unsigned WKOC  :  1;
        unsigned PHCD  :  1;
        unsigned PFSC  :  1;
        unsigned SIM   :  1;
        unsigned PSPD  :  2;
        unsigned PTW   :  1;
        unsigned STS   :  1;
        unsigned PTS   :  2;
    } B;
} hw_usbctrl_portsc1_t;
#endif


//
// constants & macros for entire HW_USBCTRL_PORTSC1 register
//

#define HW_USBCTRL_PORTSC1_ADDR      (REGS_USBCTRL_BASE + 0x00000184)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_PORTSC1           (*(volatile hw_usbctrl_portsc1_t *) HW_USBCTRL_PORTSC1_ADDR)
#define HW_USBCTRL_PORTSC1_RD()      (HW_USBCTRL_PORTSC1.U)
#define HW_USBCTRL_PORTSC1_WR(v)     (HW_USBCTRL_PORTSC1.U = (v))
#define HW_USBCTRL_PORTSC1_SET(v)    (HW_USBCTRL_PORTSC1_WR(HW_USBCTRL_PORTSC1_RD() |  (v)))
#define HW_USBCTRL_PORTSC1_CLR(v)    (HW_USBCTRL_PORTSC1_WR(HW_USBCTRL_PORTSC1_RD() & ~(v)))
#define HW_USBCTRL_PORTSC1_TOG(v)    (HW_USBCTRL_PORTSC1_WR(HW_USBCTRL_PORTSC1_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_PORTSC1 bitfields
//

//--- Register HW_USBCTRL_PORTSC1, field PTS

#define BP_USBCTRL_PORTSC1_PTS      30
#define BM_USBCTRL_PORTSC1_PTS      0xC0000000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_PORTSC1_PTS(v)   ((((reg32_t) v) << 30) & BM_USBCTRL_PORTSC1_PTS)
#else
#define BF_USBCTRL_PORTSC1_PTS(v)   (((v) << 30) & BM_USBCTRL_PORTSC1_PTS)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PTS(v)   BF_CS1(USBCTRL_PORTSC1, PTS, v)
#endif

#define BV_USBCTRL_PORTSC1_PTS__UTMI    0
#define BV_USBCTRL_PORTSC1_PTS__PHIL    1
#define BV_USBCTRL_PORTSC1_PTS__ULPI    2
#define BV_USBCTRL_PORTSC1_PTS__SERIAL  3

//--- Register HW_USBCTRL_PORTSC1, field STS

#define BP_USBCTRL_PORTSC1_STS      29
#define BM_USBCTRL_PORTSC1_STS      0x20000000

#define BF_USBCTRL_PORTSC1_STS(v)   (((v) << 29) & BM_USBCTRL_PORTSC1_STS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_STS(v)   BF_CS1(USBCTRL_PORTSC1, STS, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PTW

#define BP_USBCTRL_PORTSC1_PTW      28
#define BM_USBCTRL_PORTSC1_PTW      0x10000000

#define BF_USBCTRL_PORTSC1_PTW(v)   (((v) << 28) & BM_USBCTRL_PORTSC1_PTW)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PTW(v)   BF_CS1(USBCTRL_PORTSC1, PTW, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PSPD

#define BP_USBCTRL_PORTSC1_PSPD      26
#define BM_USBCTRL_PORTSC1_PSPD      0x0C000000

#define BF_USBCTRL_PORTSC1_PSPD(v)   (((v) << 26) & BM_USBCTRL_PORTSC1_PSPD)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PSPD(v)   BF_CS1(USBCTRL_PORTSC1, PSPD, v)
#endif

#define BV_USBCTRL_PORTSC1_PSPD__FULL  0
#define BV_USBCTRL_PORTSC1_PSPD__LO    1
#define BV_USBCTRL_PORTSC1_PSPD__HI    2

//--- Register HW_USBCTRL_PORTSC1, field PFSC

#define BP_USBCTRL_PORTSC1_PFSC      24
#define BM_USBCTRL_PORTSC1_PFSC      0x01000000

#define BF_USBCTRL_PORTSC1_PFSC(v)   (((v) << 24) & BM_USBCTRL_PORTSC1_PFSC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PFSC(v)   BF_CS1(USBCTRL_PORTSC1, PFSC, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PHCD

#define BP_USBCTRL_PORTSC1_PHCD      23
#define BM_USBCTRL_PORTSC1_PHCD      0x00800000

#define BF_USBCTRL_PORTSC1_PHCD(v)   (((v) << 23) & BM_USBCTRL_PORTSC1_PHCD)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PHCD(v)   BF_CS1(USBCTRL_PORTSC1, PHCD, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field WKOC

#define BP_USBCTRL_PORTSC1_WKOC      22
#define BM_USBCTRL_PORTSC1_WKOC      0x00400000

#define BF_USBCTRL_PORTSC1_WKOC(v)   (((v) << 22) & BM_USBCTRL_PORTSC1_WKOC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_WKOC(v)   BF_CS1(USBCTRL_PORTSC1, WKOC, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field WKDS

#define BP_USBCTRL_PORTSC1_WKDS      21
#define BM_USBCTRL_PORTSC1_WKDS      0x00200000

#define BF_USBCTRL_PORTSC1_WKDS(v)   (((v) << 21) & BM_USBCTRL_PORTSC1_WKDS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_WKDS(v)   BF_CS1(USBCTRL_PORTSC1, WKDS, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field WKCN

#define BP_USBCTRL_PORTSC1_WKCN      20
#define BM_USBCTRL_PORTSC1_WKCN      0x00100000

#define BF_USBCTRL_PORTSC1_WKCN(v)   (((v) << 20) & BM_USBCTRL_PORTSC1_WKCN)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_WKCN(v)   BF_CS1(USBCTRL_PORTSC1, WKCN, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PTC

#define BP_USBCTRL_PORTSC1_PTC      16
#define BM_USBCTRL_PORTSC1_PTC      0x000F0000

#define BF_USBCTRL_PORTSC1_PTC(v)   (((v) << 16) & BM_USBCTRL_PORTSC1_PTC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PTC(v)   BF_CS1(USBCTRL_PORTSC1, PTC, v)
#endif

#define BV_USBCTRL_PORTSC1_PTC__DISABLE        0
#define BV_USBCTRL_PORTSC1_PTC__J              1
#define BV_USBCTRL_PORTSC1_PTC__K              2
#define BV_USBCTRL_PORTSC1_PTC__SE0orNAK       3
#define BV_USBCTRL_PORTSC1_PTC__Packet         4
#define BV_USBCTRL_PORTSC1_PTC__ForceEnableHS  5
#define BV_USBCTRL_PORTSC1_PTC__ForceEnableFS  6
#define BV_USBCTRL_PORTSC1_PTC__ForceEnableLS  7

//--- Register HW_USBCTRL_PORTSC1, field PIC

#define BP_USBCTRL_PORTSC1_PIC      14
#define BM_USBCTRL_PORTSC1_PIC      0x0000C000

#define BF_USBCTRL_PORTSC1_PIC(v)   (((v) << 14) & BM_USBCTRL_PORTSC1_PIC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PIC(v)   BF_CS1(USBCTRL_PORTSC1, PIC, v)
#endif

#define BV_USBCTRL_PORTSC1_PIC__OFF    0
#define BV_USBCTRL_PORTSC1_PIC__AMBER  1
#define BV_USBCTRL_PORTSC1_PIC__GREEN  2
#define BV_USBCTRL_PORTSC1_PIC__UNDEF  3

//--- Register HW_USBCTRL_PORTSC1, field PO

#define BP_USBCTRL_PORTSC1_PO      13
#define BM_USBCTRL_PORTSC1_PO      0x00002000

#define BF_USBCTRL_PORTSC1_PO(v)   (((v) << 13) & BM_USBCTRL_PORTSC1_PO)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PO(v)   BF_CS1(USBCTRL_PORTSC1, PO, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PP

#define BP_USBCTRL_PORTSC1_PP      12
#define BM_USBCTRL_PORTSC1_PP      0x00001000

#define BF_USBCTRL_PORTSC1_PP(v)   (((v) << 12) & BM_USBCTRL_PORTSC1_PP)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PP(v)   BF_CS1(USBCTRL_PORTSC1, PP, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field LS

#define BP_USBCTRL_PORTSC1_LS      10
#define BM_USBCTRL_PORTSC1_LS      0x00000C00

#define BF_USBCTRL_PORTSC1_LS(v)   (((v) << 10) & BM_USBCTRL_PORTSC1_LS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_LS(v)   BF_CS1(USBCTRL_PORTSC1, LS, v)
#endif

#define BV_USBCTRL_PORTSC1_LS__SE0  0x0
#define BV_USBCTRL_PORTSC1_LS__K    1
#define BV_USBCTRL_PORTSC1_LS__J    2

//--- Register HW_USBCTRL_PORTSC1, field HSP

#define BP_USBCTRL_PORTSC1_HSP      9
#define BM_USBCTRL_PORTSC1_HSP      0x00000200

#define BF_USBCTRL_PORTSC1_HSP(v)   (((v) << 9) & BM_USBCTRL_PORTSC1_HSP)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_HSP(v)   BF_CS1(USBCTRL_PORTSC1, HSP, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PR

#define BP_USBCTRL_PORTSC1_PR      8
#define BM_USBCTRL_PORTSC1_PR      0x00000100

#define BF_USBCTRL_PORTSC1_PR(v)   (((v) << 8) & BM_USBCTRL_PORTSC1_PR)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PR(v)   BF_CS1(USBCTRL_PORTSC1, PR, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field SUSP

#define BP_USBCTRL_PORTSC1_SUSP      7
#define BM_USBCTRL_PORTSC1_SUSP      0x00000080

#define BF_USBCTRL_PORTSC1_SUSP(v)   (((v) << 7) & BM_USBCTRL_PORTSC1_SUSP)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_SUSP(v)   BF_CS1(USBCTRL_PORTSC1, SUSP, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field FPR

#define BP_USBCTRL_PORTSC1_FPR      6
#define BM_USBCTRL_PORTSC1_FPR      0x00000040

#define BF_USBCTRL_PORTSC1_FPR(v)   (((v) << 6) & BM_USBCTRL_PORTSC1_FPR)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_FPR(v)   BF_CS1(USBCTRL_PORTSC1, FPR, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field OCC

#define BP_USBCTRL_PORTSC1_OCC      5
#define BM_USBCTRL_PORTSC1_OCC      0x00000020

#define BF_USBCTRL_PORTSC1_OCC(v)   (((v) << 5) & BM_USBCTRL_PORTSC1_OCC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_OCC(v)   BF_CS1(USBCTRL_PORTSC1, OCC, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field OCA

#define BP_USBCTRL_PORTSC1_OCA      4
#define BM_USBCTRL_PORTSC1_OCA      0x00000010

#define BF_USBCTRL_PORTSC1_OCA(v)   (((v) << 4) & BM_USBCTRL_PORTSC1_OCA)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_OCA(v)   BF_CS1(USBCTRL_PORTSC1, OCA, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PEC

#define BP_USBCTRL_PORTSC1_PEC      3
#define BM_USBCTRL_PORTSC1_PEC      0x00000008

#define BF_USBCTRL_PORTSC1_PEC(v)   (((v) << 3) & BM_USBCTRL_PORTSC1_PEC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PEC(v)   BF_CS1(USBCTRL_PORTSC1, PEC, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field PE

#define BP_USBCTRL_PORTSC1_PE      2
#define BM_USBCTRL_PORTSC1_PE      0x00000004

#define BF_USBCTRL_PORTSC1_PE(v)   (((v) << 2) & BM_USBCTRL_PORTSC1_PE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_PE(v)   BF_CS1(USBCTRL_PORTSC1, PE, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field CSC

#define BP_USBCTRL_PORTSC1_CSC      1
#define BM_USBCTRL_PORTSC1_CSC      0x00000002

#define BF_USBCTRL_PORTSC1_CSC(v)   (((v) << 1) & BM_USBCTRL_PORTSC1_CSC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_CSC(v)   BF_CS1(USBCTRL_PORTSC1, CSC, v)
#endif

//--- Register HW_USBCTRL_PORTSC1, field CCS

#define BP_USBCTRL_PORTSC1_CCS      0
#define BM_USBCTRL_PORTSC1_CCS      0x00000001

#define BF_USBCTRL_PORTSC1_CCS(v)   (((v) << 0) & BM_USBCTRL_PORTSC1_CCS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_PORTSC1_CCS(v)   BF_CS1(USBCTRL_PORTSC1, CCS, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_OTGSC - USB CTRL OTG
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VD      :  1;
        unsigned VC      :  1;
        unsigned HAAR    :  1;
        unsigned OT      :  1;
        unsigned DP      :  1;
        unsigned IDPU    :  1;
        unsigned HADP    :  1;
        unsigned HABA    :  1;
        unsigned ID      :  1;
        unsigned AVV     :  1;
        unsigned ASV     :  1;
        unsigned BSV     :  1;
        unsigned BSE     :  1;
        unsigned ONEMST  :  1;
        unsigned DPS     :  1;
        unsigned RSRVD0  :  1;
        unsigned IDIS    :  1;
        unsigned AVVIS   :  1;
        unsigned ASVIS   :  1;
        unsigned BSVIS   :  1;
        unsigned BSEIS   :  1;
        unsigned ONEMSS  :  1;
        unsigned DPIS    :  1;
        unsigned RSRVD1  :  1;
        unsigned IDIE    :  1;
        unsigned AVVIE   :  1;
        unsigned ASVIE   :  1;
        unsigned BSVIE   :  1;
        unsigned BSEIE   :  1;
        unsigned ONEMSE  :  1;
        unsigned DPIE    :  1;
        unsigned RSRVD2  :  1;
    } B;
} hw_usbctrl_otgsc_t;
#endif


//
// constants & macros for entire HW_USBCTRL_OTGSC register
//

#define HW_USBCTRL_OTGSC_ADDR      (REGS_USBCTRL_BASE + 0x000001A4)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_OTGSC           (*(volatile hw_usbctrl_otgsc_t *) HW_USBCTRL_OTGSC_ADDR)
#define HW_USBCTRL_OTGSC_RD()      (HW_USBCTRL_OTGSC.U)
#define HW_USBCTRL_OTGSC_WR(v)     (HW_USBCTRL_OTGSC.U = (v))
#define HW_USBCTRL_OTGSC_SET(v)    (HW_USBCTRL_OTGSC_WR(HW_USBCTRL_OTGSC_RD() |  (v)))
#define HW_USBCTRL_OTGSC_CLR(v)    (HW_USBCTRL_OTGSC_WR(HW_USBCTRL_OTGSC_RD() & ~(v)))
#define HW_USBCTRL_OTGSC_TOG(v)    (HW_USBCTRL_OTGSC_WR(HW_USBCTRL_OTGSC_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_OTGSC bitfields
//

//--- Register HW_USBCTRL_OTGSC, field DPIE

#define BP_USBCTRL_OTGSC_DPIE      30
#define BM_USBCTRL_OTGSC_DPIE      0x40000000

#define BF_USBCTRL_OTGSC_DPIE(v)   (((v) << 30) & BM_USBCTRL_OTGSC_DPIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_DPIE(v)   BF_CS1(USBCTRL_OTGSC, DPIE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field ONEMSE

#define BP_USBCTRL_OTGSC_ONEMSE      29
#define BM_USBCTRL_OTGSC_ONEMSE      0x20000000

#define BF_USBCTRL_OTGSC_ONEMSE(v)   (((v) << 29) & BM_USBCTRL_OTGSC_ONEMSE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_ONEMSE(v)   BF_CS1(USBCTRL_OTGSC, ONEMSE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field BSEIE

#define BP_USBCTRL_OTGSC_BSEIE      28
#define BM_USBCTRL_OTGSC_BSEIE      0x10000000

#define BF_USBCTRL_OTGSC_BSEIE(v)   (((v) << 28) & BM_USBCTRL_OTGSC_BSEIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_BSEIE(v)   BF_CS1(USBCTRL_OTGSC, BSEIE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field BSVIE

#define BP_USBCTRL_OTGSC_BSVIE      27
#define BM_USBCTRL_OTGSC_BSVIE      0x08000000

#define BF_USBCTRL_OTGSC_BSVIE(v)   (((v) << 27) & BM_USBCTRL_OTGSC_BSVIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_BSVIE(v)   BF_CS1(USBCTRL_OTGSC, BSVIE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field ASVIE

#define BP_USBCTRL_OTGSC_ASVIE      26
#define BM_USBCTRL_OTGSC_ASVIE      0x04000000

#define BF_USBCTRL_OTGSC_ASVIE(v)   (((v) << 26) & BM_USBCTRL_OTGSC_ASVIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_ASVIE(v)   BF_CS1(USBCTRL_OTGSC, ASVIE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field AVVIE

#define BP_USBCTRL_OTGSC_AVVIE      25
#define BM_USBCTRL_OTGSC_AVVIE      0x02000000

#define BF_USBCTRL_OTGSC_AVVIE(v)   (((v) << 25) & BM_USBCTRL_OTGSC_AVVIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_AVVIE(v)   BF_CS1(USBCTRL_OTGSC, AVVIE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field IDIE

#define BP_USBCTRL_OTGSC_IDIE      24
#define BM_USBCTRL_OTGSC_IDIE      0x01000000

#define BF_USBCTRL_OTGSC_IDIE(v)   (((v) << 24) & BM_USBCTRL_OTGSC_IDIE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_IDIE(v)   BF_CS1(USBCTRL_OTGSC, IDIE, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field DPIS

#define BP_USBCTRL_OTGSC_DPIS      22
#define BM_USBCTRL_OTGSC_DPIS      0x00400000

#define BF_USBCTRL_OTGSC_DPIS(v)   (((v) << 22) & BM_USBCTRL_OTGSC_DPIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_DPIS(v)   BF_CS1(USBCTRL_OTGSC, DPIS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field ONEMSS

#define BP_USBCTRL_OTGSC_ONEMSS      21
#define BM_USBCTRL_OTGSC_ONEMSS      0x00200000

#define BF_USBCTRL_OTGSC_ONEMSS(v)   (((v) << 21) & BM_USBCTRL_OTGSC_ONEMSS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_ONEMSS(v)   BF_CS1(USBCTRL_OTGSC, ONEMSS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field BSEIS

#define BP_USBCTRL_OTGSC_BSEIS      20
#define BM_USBCTRL_OTGSC_BSEIS      0x00100000

#define BF_USBCTRL_OTGSC_BSEIS(v)   (((v) << 20) & BM_USBCTRL_OTGSC_BSEIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_BSEIS(v)   BF_CS1(USBCTRL_OTGSC, BSEIS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field BSVIS

#define BP_USBCTRL_OTGSC_BSVIS      19
#define BM_USBCTRL_OTGSC_BSVIS      0x00080000

#define BF_USBCTRL_OTGSC_BSVIS(v)   (((v) << 19) & BM_USBCTRL_OTGSC_BSVIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_BSVIS(v)   BF_CS1(USBCTRL_OTGSC, BSVIS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field ASVIS

#define BP_USBCTRL_OTGSC_ASVIS      18
#define BM_USBCTRL_OTGSC_ASVIS      0x00040000

#define BF_USBCTRL_OTGSC_ASVIS(v)   (((v) << 18) & BM_USBCTRL_OTGSC_ASVIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_ASVIS(v)   BF_CS1(USBCTRL_OTGSC, ASVIS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field AVVIS

#define BP_USBCTRL_OTGSC_AVVIS      17
#define BM_USBCTRL_OTGSC_AVVIS      0x00020000

#define BF_USBCTRL_OTGSC_AVVIS(v)   (((v) << 17) & BM_USBCTRL_OTGSC_AVVIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_AVVIS(v)   BF_CS1(USBCTRL_OTGSC, AVVIS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field IDIS

#define BP_USBCTRL_OTGSC_IDIS      16
#define BM_USBCTRL_OTGSC_IDIS      0x00010000

#define BF_USBCTRL_OTGSC_IDIS(v)   (((v) << 16) & BM_USBCTRL_OTGSC_IDIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_IDIS(v)   BF_CS1(USBCTRL_OTGSC, IDIS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field DPS

#define BP_USBCTRL_OTGSC_DPS      14
#define BM_USBCTRL_OTGSC_DPS      0x00004000

#define BF_USBCTRL_OTGSC_DPS(v)   (((v) << 14) & BM_USBCTRL_OTGSC_DPS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_DPS(v)   BF_CS1(USBCTRL_OTGSC, DPS, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field ONEMST

#define BP_USBCTRL_OTGSC_ONEMST      13
#define BM_USBCTRL_OTGSC_ONEMST      0x00002000

#define BF_USBCTRL_OTGSC_ONEMST(v)   (((v) << 13) & BM_USBCTRL_OTGSC_ONEMST)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_ONEMST(v)   BF_CS1(USBCTRL_OTGSC, ONEMST, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field BSE

#define BP_USBCTRL_OTGSC_BSE      12
#define BM_USBCTRL_OTGSC_BSE      0x00001000

#define BF_USBCTRL_OTGSC_BSE(v)   (((v) << 12) & BM_USBCTRL_OTGSC_BSE)

//--- Register HW_USBCTRL_OTGSC, field BSV

#define BP_USBCTRL_OTGSC_BSV      11
#define BM_USBCTRL_OTGSC_BSV      0x00000800

#define BF_USBCTRL_OTGSC_BSV(v)   (((v) << 11) & BM_USBCTRL_OTGSC_BSV)

//--- Register HW_USBCTRL_OTGSC, field ASV

#define BP_USBCTRL_OTGSC_ASV      10
#define BM_USBCTRL_OTGSC_ASV      0x00000400

#define BF_USBCTRL_OTGSC_ASV(v)   (((v) << 10) & BM_USBCTRL_OTGSC_ASV)

//--- Register HW_USBCTRL_OTGSC, field AVV

#define BP_USBCTRL_OTGSC_AVV      9
#define BM_USBCTRL_OTGSC_AVV      0x00000200

#define BF_USBCTRL_OTGSC_AVV(v)   (((v) << 9) & BM_USBCTRL_OTGSC_AVV)

//--- Register HW_USBCTRL_OTGSC, field ID

#define BP_USBCTRL_OTGSC_ID      8
#define BM_USBCTRL_OTGSC_ID      0x00000100

#define BF_USBCTRL_OTGSC_ID(v)   (((v) << 8) & BM_USBCTRL_OTGSC_ID)

//--- Register HW_USBCTRL_OTGSC, field HABA

#define BP_USBCTRL_OTGSC_HABA      7
#define BM_USBCTRL_OTGSC_HABA      0x00000080

#define BF_USBCTRL_OTGSC_HABA(v)   (((v) << 7) & BM_USBCTRL_OTGSC_HABA)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_HABA(v)   BF_CS1(USBCTRL_OTGSC, HABA, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field HADP

#define BP_USBCTRL_OTGSC_HADP      6
#define BM_USBCTRL_OTGSC_HADP      0x00000040

#define BF_USBCTRL_OTGSC_HADP(v)   (((v) << 6) & BM_USBCTRL_OTGSC_HADP)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_HADP(v)   BF_CS1(USBCTRL_OTGSC, HADP, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field IDPU

#define BP_USBCTRL_OTGSC_IDPU      5
#define BM_USBCTRL_OTGSC_IDPU      0x00000020

#define BF_USBCTRL_OTGSC_IDPU(v)   (((v) << 5) & BM_USBCTRL_OTGSC_IDPU)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_IDPU(v)   BF_CS1(USBCTRL_OTGSC, IDPU, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field DP

#define BP_USBCTRL_OTGSC_DP      4
#define BM_USBCTRL_OTGSC_DP      0x00000010

#define BF_USBCTRL_OTGSC_DP(v)   (((v) << 4) & BM_USBCTRL_OTGSC_DP)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_DP(v)   BF_CS1(USBCTRL_OTGSC, DP, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field OT

#define BP_USBCTRL_OTGSC_OT      3
#define BM_USBCTRL_OTGSC_OT      0x00000008

#define BF_USBCTRL_OTGSC_OT(v)   (((v) << 3) & BM_USBCTRL_OTGSC_OT)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_OT(v)   BF_CS1(USBCTRL_OTGSC, OT, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field HAAR

#define BP_USBCTRL_OTGSC_HAAR      2
#define BM_USBCTRL_OTGSC_HAAR      0x00000004

#define BF_USBCTRL_OTGSC_HAAR(v)   (((v) << 2) & BM_USBCTRL_OTGSC_HAAR)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_HAAR(v)   BF_CS1(USBCTRL_OTGSC, HAAR, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field VC

#define BP_USBCTRL_OTGSC_VC      1
#define BM_USBCTRL_OTGSC_VC      0x00000002

#define BF_USBCTRL_OTGSC_VC(v)   (((v) << 1) & BM_USBCTRL_OTGSC_VC)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_VC(v)   BF_CS1(USBCTRL_OTGSC, VC, v)
#endif

//--- Register HW_USBCTRL_OTGSC, field VD

#define BP_USBCTRL_OTGSC_VD      0
#define BM_USBCTRL_OTGSC_VD      0x00000001

#define BF_USBCTRL_OTGSC_VD(v)   (((v) << 0) & BM_USBCTRL_OTGSC_VD)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_OTGSC_VD(v)   BF_CS1(USBCTRL_OTGSC, VD, v)
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_USBMODE - USB CTRL MODE
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CM      :  2;
        unsigned ES      :  1;
        unsigned SLOM    :  1;
        unsigned SDIS    :  1;
        unsigned RESVRD  : 27;
    } B;
} hw_usbctrl_usbmode_t;
#endif


//
// constants & macros for entire HW_USBCTRL_USBMODE register
//

#define HW_USBCTRL_USBMODE_ADDR      (REGS_USBCTRL_BASE + 0x000001A8)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_USBMODE           (*(volatile hw_usbctrl_usbmode_t *) HW_USBCTRL_USBMODE_ADDR)
#define HW_USBCTRL_USBMODE_RD()      (HW_USBCTRL_USBMODE.U)
#define HW_USBCTRL_USBMODE_WR(v)     (HW_USBCTRL_USBMODE.U = (v))
#define HW_USBCTRL_USBMODE_SET(v)    (HW_USBCTRL_USBMODE_WR(HW_USBCTRL_USBMODE_RD() |  (v)))
#define HW_USBCTRL_USBMODE_CLR(v)    (HW_USBCTRL_USBMODE_WR(HW_USBCTRL_USBMODE_RD() & ~(v)))
#define HW_USBCTRL_USBMODE_TOG(v)    (HW_USBCTRL_USBMODE_WR(HW_USBCTRL_USBMODE_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_USBMODE bitfields
//

//--- Register HW_USBCTRL_USBMODE, field SDIS

#define BP_USBCTRL_USBMODE_SDIS      4
#define BM_USBCTRL_USBMODE_SDIS      0x00000010

#define BF_USBCTRL_USBMODE_SDIS(v)   (((v) << 4) & BM_USBCTRL_USBMODE_SDIS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBMODE_SDIS(v)   BF_CS1(USBCTRL_USBMODE, SDIS, v)
#endif

//--- Register HW_USBCTRL_USBMODE, field SLOM

#define BP_USBCTRL_USBMODE_SLOM      3
#define BM_USBCTRL_USBMODE_SLOM      0x00000008

#define BF_USBCTRL_USBMODE_SLOM(v)   (((v) << 3) & BM_USBCTRL_USBMODE_SLOM)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBMODE_SLOM(v)   BF_CS1(USBCTRL_USBMODE, SLOM, v)
#endif

//--- Register HW_USBCTRL_USBMODE, field ES

#define BP_USBCTRL_USBMODE_ES      2
#define BM_USBCTRL_USBMODE_ES      0x00000004

#define BF_USBCTRL_USBMODE_ES(v)   (((v) << 2) & BM_USBCTRL_USBMODE_ES)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBMODE_ES(v)   BF_CS1(USBCTRL_USBMODE, ES, v)
#endif

//--- Register HW_USBCTRL_USBMODE, field CM

#define BP_USBCTRL_USBMODE_CM      0
#define BM_USBCTRL_USBMODE_CM      0x00000003

#define BF_USBCTRL_USBMODE_CM(v)   (((v) << 0) & BM_USBCTRL_USBMODE_CM)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_USBMODE_CM(v)   BF_CS1(USBCTRL_USBMODE, CM, v)
#endif

#define BV_USBCTRL_USBMODE_CM__IDLE    0x0
#define BV_USBCTRL_USBMODE_CM__DEVICE  0x2
#define BV_USBCTRL_USBMODE_CM__HOST    0x3


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ENDPTSETUPSTAT - USB CTRL ENDPOINT SETUP STATUS
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  STS;
        reg16_t  RESVRD;
    } B;
} hw_usbctrl_endptsetupstat_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ENDPTSETUPSTAT register
//

#define HW_USBCTRL_ENDPTSETUPSTAT_ADDR      (REGS_USBCTRL_BASE + 0x000001AC)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ENDPTSETUPSTAT           (*(volatile hw_usbctrl_endptsetupstat_t *) HW_USBCTRL_ENDPTSETUPSTAT_ADDR)
#define HW_USBCTRL_ENDPTSETUPSTAT_RD()      (HW_USBCTRL_ENDPTSETUPSTAT.U)
#define HW_USBCTRL_ENDPTSETUPSTAT_WR(v)     (HW_USBCTRL_ENDPTSETUPSTAT.U = (v))
#define HW_USBCTRL_ENDPTSETUPSTAT_SET(v)    (HW_USBCTRL_ENDPTSETUPSTAT_WR(HW_USBCTRL_ENDPTSETUPSTAT_RD() |  (v)))
#define HW_USBCTRL_ENDPTSETUPSTAT_CLR(v)    (HW_USBCTRL_ENDPTSETUPSTAT_WR(HW_USBCTRL_ENDPTSETUPSTAT_RD() & ~(v)))
#define HW_USBCTRL_ENDPTSETUPSTAT_TOG(v)    (HW_USBCTRL_ENDPTSETUPSTAT_WR(HW_USBCTRL_ENDPTSETUPSTAT_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_ENDPTSETUPSTAT bitfields
//

//--- Register HW_USBCTRL_ENDPTSETUPSTAT, field STS

#define BP_USBCTRL_ENDPTSETUPSTAT_STS      0
#define BM_USBCTRL_ENDPTSETUPSTAT_STS      0x0000FFFF

#define BF_USBCTRL_ENDPTSETUPSTAT_STS(v)   (((v) << 0) & BM_USBCTRL_ENDPTSETUPSTAT_STS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTSETUPSTAT_STS(v)   (HW_USBCTRL_ENDPTSETUPSTAT.B.STS = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ENDPTPRIME - USB CTRL ENDPOINT PRIME
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  PERB;
        reg16_t  PETB;
    } B;
} hw_usbctrl_endptprime_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ENDPTPRIME register
//

#define HW_USBCTRL_ENDPTPRIME_ADDR      (REGS_USBCTRL_BASE + 0x000001B0)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ENDPTPRIME           (*(volatile hw_usbctrl_endptprime_t *) HW_USBCTRL_ENDPTPRIME_ADDR)
#define HW_USBCTRL_ENDPTPRIME_RD()      (HW_USBCTRL_ENDPTPRIME.U)
#define HW_USBCTRL_ENDPTPRIME_WR(v)     (HW_USBCTRL_ENDPTPRIME.U = (v))
#define HW_USBCTRL_ENDPTPRIME_SET(v)    (HW_USBCTRL_ENDPTPRIME_WR(HW_USBCTRL_ENDPTPRIME_RD() |  (v)))
#define HW_USBCTRL_ENDPTPRIME_CLR(v)    (HW_USBCTRL_ENDPTPRIME_WR(HW_USBCTRL_ENDPTPRIME_RD() & ~(v)))
#define HW_USBCTRL_ENDPTPRIME_TOG(v)    (HW_USBCTRL_ENDPTPRIME_WR(HW_USBCTRL_ENDPTPRIME_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_ENDPTPRIME bitfields
//

//--- Register HW_USBCTRL_ENDPTPRIME, field PETB

#define BP_USBCTRL_ENDPTPRIME_PETB      16
#define BM_USBCTRL_ENDPTPRIME_PETB      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_ENDPTPRIME_PETB(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_ENDPTPRIME_PETB)
#else
#define BF_USBCTRL_ENDPTPRIME_PETB(v)   (((v) << 16) & BM_USBCTRL_ENDPTPRIME_PETB)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTPRIME_PETB(v)   (HW_USBCTRL_ENDPTPRIME.B.PETB = (v))
#endif

//--- Register HW_USBCTRL_ENDPTPRIME, field PERB

#define BP_USBCTRL_ENDPTPRIME_PERB      0
#define BM_USBCTRL_ENDPTPRIME_PERB      0x0000FFFF

#define BF_USBCTRL_ENDPTPRIME_PERB(v)   (((v) << 0) & BM_USBCTRL_ENDPTPRIME_PERB)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTPRIME_PERB(v)   (HW_USBCTRL_ENDPTPRIME.B.PERB = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ENDPTFLUSH - USB CTRL ENDPOINT FLUSH
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  FERB;
        reg16_t  FETB;
    } B;
} hw_usbctrl_endptflush_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ENDPTFLUSH register
//

#define HW_USBCTRL_ENDPTFLUSH_ADDR      (REGS_USBCTRL_BASE + 0x000001B4)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ENDPTFLUSH           (*(volatile hw_usbctrl_endptflush_t *) HW_USBCTRL_ENDPTFLUSH_ADDR)
#define HW_USBCTRL_ENDPTFLUSH_RD()      (HW_USBCTRL_ENDPTFLUSH.U)
#define HW_USBCTRL_ENDPTFLUSH_WR(v)     (HW_USBCTRL_ENDPTFLUSH.U = (v))
#define HW_USBCTRL_ENDPTFLUSH_SET(v)    (HW_USBCTRL_ENDPTFLUSH_WR(HW_USBCTRL_ENDPTFLUSH_RD() |  (v)))
#define HW_USBCTRL_ENDPTFLUSH_CLR(v)    (HW_USBCTRL_ENDPTFLUSH_WR(HW_USBCTRL_ENDPTFLUSH_RD() & ~(v)))
#define HW_USBCTRL_ENDPTFLUSH_TOG(v)    (HW_USBCTRL_ENDPTFLUSH_WR(HW_USBCTRL_ENDPTFLUSH_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_ENDPTFLUSH bitfields
//

//--- Register HW_USBCTRL_ENDPTFLUSH, field FETB

#define BP_USBCTRL_ENDPTFLUSH_FETB      16
#define BM_USBCTRL_ENDPTFLUSH_FETB      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_ENDPTFLUSH_FETB(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_ENDPTFLUSH_FETB)
#else
#define BF_USBCTRL_ENDPTFLUSH_FETB(v)   (((v) << 16) & BM_USBCTRL_ENDPTFLUSH_FETB)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTFLUSH_FETB(v)   (HW_USBCTRL_ENDPTFLUSH.B.FETB = (v))
#endif

//--- Register HW_USBCTRL_ENDPTFLUSH, field FERB

#define BP_USBCTRL_ENDPTFLUSH_FERB      0
#define BM_USBCTRL_ENDPTFLUSH_FERB      0x0000FFFF

#define BF_USBCTRL_ENDPTFLUSH_FERB(v)   (((v) << 0) & BM_USBCTRL_ENDPTFLUSH_FERB)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTFLUSH_FERB(v)   (HW_USBCTRL_ENDPTFLUSH.B.FERB = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ENDPTSTATUS - USB CTRL ENDPOINT STATUS
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  ERBR;
        reg16_t  ETBR;
    } B;
} hw_usbctrl_endptstatus_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ENDPTSTATUS register
//

#define HW_USBCTRL_ENDPTSTATUS_ADDR      (REGS_USBCTRL_BASE + 0x000001B8)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ENDPTSTATUS           (*(volatile hw_usbctrl_endptstatus_t *) HW_USBCTRL_ENDPTSTATUS_ADDR)
#define HW_USBCTRL_ENDPTSTATUS_RD()      (HW_USBCTRL_ENDPTSTATUS.U)
#endif


//
// constants & macros for individual HW_USBCTRL_ENDPTSTATUS bitfields
//

//--- Register HW_USBCTRL_ENDPTSTATUS, field ETBR

#define BP_USBCTRL_ENDPTSTATUS_ETBR      16
#define BM_USBCTRL_ENDPTSTATUS_ETBR      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_ENDPTSTATUS_ETBR(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_ENDPTSTATUS_ETBR)
#else
#define BF_USBCTRL_ENDPTSTATUS_ETBR(v)   (((v) << 16) & BM_USBCTRL_ENDPTSTATUS_ETBR)
#endif

//--- Register HW_USBCTRL_ENDPTSTATUS, field ERBR

#define BP_USBCTRL_ENDPTSTATUS_ERBR      0
#define BM_USBCTRL_ENDPTSTATUS_ERBR      0x0000FFFF

#define BF_USBCTRL_ENDPTSTATUS_ERBR(v)   (((v) << 0) & BM_USBCTRL_ENDPTSTATUS_ERBR)


////////////////////////////////////////////////////////////////////////////////
//// HW_USBCTRL_ENDPTCOMPLETE - USB CTRL ENDPOINT COMPLETE
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        reg16_t  ERCE;
        reg16_t  ETCE;
    } B;
} hw_usbctrl_endptcomplete_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ENDPTCOMPLETE register
//

#define HW_USBCTRL_ENDPTCOMPLETE_ADDR      (REGS_USBCTRL_BASE + 0x000001BC)

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ENDPTCOMPLETE           (*(volatile hw_usbctrl_endptcomplete_t *) HW_USBCTRL_ENDPTCOMPLETE_ADDR)
#define HW_USBCTRL_ENDPTCOMPLETE_RD()      (HW_USBCTRL_ENDPTCOMPLETE.U)
#define HW_USBCTRL_ENDPTCOMPLETE_WR(v)     (HW_USBCTRL_ENDPTCOMPLETE.U = (v))
#define HW_USBCTRL_ENDPTCOMPLETE_SET(v)    (HW_USBCTRL_ENDPTCOMPLETE_WR(HW_USBCTRL_ENDPTCOMPLETE_RD() |  (v)))
#define HW_USBCTRL_ENDPTCOMPLETE_CLR(v)    (HW_USBCTRL_ENDPTCOMPLETE_WR(HW_USBCTRL_ENDPTCOMPLETE_RD() & ~(v)))
#define HW_USBCTRL_ENDPTCOMPLETE_TOG(v)    (HW_USBCTRL_ENDPTCOMPLETE_WR(HW_USBCTRL_ENDPTCOMPLETE_RD() ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_ENDPTCOMPLETE bitfields
//

//--- Register HW_USBCTRL_ENDPTCOMPLETE, field ETCE

#define BP_USBCTRL_ENDPTCOMPLETE_ETCE      16
#define BM_USBCTRL_ENDPTCOMPLETE_ETCE      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_USBCTRL_ENDPTCOMPLETE_ETCE(v)   ((((reg32_t) v) << 16) & BM_USBCTRL_ENDPTCOMPLETE_ETCE)
#else
#define BF_USBCTRL_ENDPTCOMPLETE_ETCE(v)   (((v) << 16) & BM_USBCTRL_ENDPTCOMPLETE_ETCE)
#endif

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCOMPLETE_ETCE(v)   (HW_USBCTRL_ENDPTCOMPLETE.B.ETCE = (v))
#endif

//--- Register HW_USBCTRL_ENDPTCOMPLETE, field ERCE

#define BP_USBCTRL_ENDPTCOMPLETE_ERCE      0
#define BM_USBCTRL_ENDPTCOMPLETE_ERCE      0x0000FFFF

#define BF_USBCTRL_ENDPTCOMPLETE_ERCE(v)   (((v) << 0) & BM_USBCTRL_ENDPTCOMPLETE_ERCE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCOMPLETE_ERCE(v)   (HW_USBCTRL_ENDPTCOMPLETE.B.ERCE = (v))
#endif


////////////////////////////////////////////////////////////////////////////////
//// multi-register-define name HW_USBCTRL_ENDPTCTRLn : base 0x800801C0 : count 5 : offset 0x4
////////////////////////////////////////////////////////////////////////////////

#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RXS    :  1;
        unsigned RSVD1  :  1;
        unsigned RXT    :  2;
        unsigned RSVD2  :  1;
        unsigned RXI    :  1;
        unsigned RXR    :  1;
        unsigned RXE    :  1;
        reg8_t   RSVD3;
        unsigned TXS    :  1;
        unsigned RSVD4  :  1;
        unsigned TXT    :  2;
        unsigned RSVD5  :  1;
        unsigned TXI    :  1;
        unsigned TXR    :  1;
        unsigned TXE    :  1;
        reg8_t   RSVD6;
    } B;
} hw_usbctrl_endptctrln_t;
#endif


//
// constants & macros for entire HW_USBCTRL_ENDPTCTRLn multi-register
//

#define HW_USBCTRL_ENDPTCTRLn_COUNT        5
#define HW_USBCTRL_ENDPTCTRLn_ADDR(n)      (REGS_USBCTRL_BASE + 0x000001C0 + ((n) * 0x4))

#ifndef __LANGUAGE_ASM__
#define HW_USBCTRL_ENDPTCTRLn(n)           (*(volatile hw_usbctrl_endptctrln_t *) HW_USBCTRL_ENDPTCTRLn_ADDR(n))
#define HW_USBCTRL_ENDPTCTRLn_RD(n)        (HW_USBCTRL_ENDPTCTRLn(n).U)
#define HW_USBCTRL_ENDPTCTRLn_WR(n, v)     (HW_USBCTRL_ENDPTCTRLn(n).U = (v))
#define HW_USBCTRL_ENDPTCTRLn_SET(n, v)    (HW_USBCTRL_ENDPTCTRLn_WR(n, HW_USBCTRL_ENDPTCTRLn_RD(n) |  (v)))
#define HW_USBCTRL_ENDPTCTRLn_CLR(n, v)    (HW_USBCTRL_ENDPTCTRLn_WR(n, HW_USBCTRL_ENDPTCTRLn_RD(n) & ~(v)))
#define HW_USBCTRL_ENDPTCTRLn_TOG(n, v)    (HW_USBCTRL_ENDPTCTRLn_WR(n, HW_USBCTRL_ENDPTCTRLn_RD(n) ^  (v)))
#endif


//
// constants & macros for individual HW_USBCTRL_ENDPTCTRLn multi-register bitfields
//

//--- Register HW_USBCTRL_ENDPTCTRLn, field TXE

#define BP_USBCTRL_ENDPTCTRLn_TXE      23
#define BM_USBCTRL_ENDPTCTRLn_TXE      0x00800000

#define BF_USBCTRL_ENDPTCTRLn_TXE(v)   (((v) << 23) & BM_USBCTRL_ENDPTCTRLn_TXE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_TXE(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, TXE, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field TXR

#define BP_USBCTRL_ENDPTCTRLn_TXR      22
#define BM_USBCTRL_ENDPTCTRLn_TXR      0x00400000

#define BF_USBCTRL_ENDPTCTRLn_TXR(v)   (((v) << 22) & BM_USBCTRL_ENDPTCTRLn_TXR)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_TXR(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, TXR, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field TXI

#define BP_USBCTRL_ENDPTCTRLn_TXI      21
#define BM_USBCTRL_ENDPTCTRLn_TXI      0x00200000

#define BF_USBCTRL_ENDPTCTRLn_TXI(v)   (((v) << 21) & BM_USBCTRL_ENDPTCTRLn_TXI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_TXI(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, TXI, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field TXT

#define BP_USBCTRL_ENDPTCTRLn_TXT      18
#define BM_USBCTRL_ENDPTCTRLn_TXT      0x000C0000

#define BF_USBCTRL_ENDPTCTRLn_TXT(v)   (((v) << 18) & BM_USBCTRL_ENDPTCTRLn_TXT)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_TXT(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, TXT, v)
#endif

#define BV_USBCTRL_ENDPTCTRLn_TXT__ISOCHRONOUS  1
#define BV_USBCTRL_ENDPTCTRLn_TXT__BULK         2
#define BV_USBCTRL_ENDPTCTRLn_TXT__INT          3

//--- Register HW_USBCTRL_ENDPTCTRLn, field TXS

#define BP_USBCTRL_ENDPTCTRLn_TXS      16
#define BM_USBCTRL_ENDPTCTRLn_TXS      0x00010000

#define BF_USBCTRL_ENDPTCTRLn_TXS(v)   (((v) << 16) & BM_USBCTRL_ENDPTCTRLn_TXS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_TXS(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, TXS, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field RXE

#define BP_USBCTRL_ENDPTCTRLn_RXE      7
#define BM_USBCTRL_ENDPTCTRLn_RXE      0x00000080

#define BF_USBCTRL_ENDPTCTRLn_RXE(v)   (((v) << 7) & BM_USBCTRL_ENDPTCTRLn_RXE)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_RXE(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, RXE, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field RXR

#define BP_USBCTRL_ENDPTCTRLn_RXR      6
#define BM_USBCTRL_ENDPTCTRLn_RXR      0x00000040

#define BF_USBCTRL_ENDPTCTRLn_RXR(v)   (((v) << 6) & BM_USBCTRL_ENDPTCTRLn_RXR)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_RXR(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, RXR, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field RXI

#define BP_USBCTRL_ENDPTCTRLn_RXI      5
#define BM_USBCTRL_ENDPTCTRLn_RXI      0x00000020

#define BF_USBCTRL_ENDPTCTRLn_RXI(v)   (((v) << 5) & BM_USBCTRL_ENDPTCTRLn_RXI)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_RXI(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, RXI, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field RXT

#define BP_USBCTRL_ENDPTCTRLn_RXT      2
#define BM_USBCTRL_ENDPTCTRLn_RXT      0x0000000C

#define BF_USBCTRL_ENDPTCTRLn_RXT(v)   (((v) << 2) & BM_USBCTRL_ENDPTCTRLn_RXT)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_RXT(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, RXT, v)
#endif

//--- Register HW_USBCTRL_ENDPTCTRLn, field RXS

#define BP_USBCTRL_ENDPTCTRLn_RXS      0
#define BM_USBCTRL_ENDPTCTRLn_RXS      0x00000001

#define BF_USBCTRL_ENDPTCTRLn_RXS(v)   (((v) << 0) & BM_USBCTRL_ENDPTCTRLn_RXS)

#ifndef __LANGUAGE_ASM__
#define BW_USBCTRL_ENDPTCTRLn_RXS(n, v)  BF_CS1n(USBCTRL_ENDPTCTRLn, n, RXS, v)
#endif


#endif // _REGSUSBCTRL_H

////////////////////////////////////////////////////////////////////////////////
