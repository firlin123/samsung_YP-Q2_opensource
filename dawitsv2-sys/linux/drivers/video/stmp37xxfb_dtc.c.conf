
#include <linux/delay.h>
#include "stmp37xxfb_controller.h"
#include "stmp37xxfb_panel.h"
#include <linux/module.h>

#define LCD_BL_PWM_CHANNEL_NO  2
#define LCD_BL_PWM_MAXDURATION 80

extern void pwm_change (int channel, uint32_t freq, int brightness);
extern void pwm_on (int channel);
extern void pwm_off (int channel);

static unsigned long backlight_level = 5;
static int bInited = 1;
static int bRotated = 0;
static int bFliped = 0;

static const unsigned long brightness_table[] = {
	0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15
};

void lcd_panel_flip (int flip)
{
	if (!bInited || flip == bFliped)
		return;

	if (flip) {
#ifdef CONFIG_FB_STMP37XX_DTC
		write_register(0x20, 0x00EF);
		write_register(0x03, 0x1020);
#else
		write_register(0x20, 0x00EF);
		write_register(0x03, 0x1020);
#endif
	}
	else {
#ifdef CONFIG_FB_STMP37XX_DTC
		write_register(0x20, 0x0000);
		write_register(0x03, 0x1030);
#else
		write_register(0x20, 0x0000);
		write_register(0x03, 0x1030);
#endif
	}
	write_command_16(0x22);
	bFliped = flip;
}

void lcd_panel_rotation (int rotate)
{
	if (!bInited || rotate == bRotated)
		return;

	switch(rotate) {
	case 90:
		write_register(0x20, 0x0000);
		write_register(0x21, 0x013F);
		write_register(0x03, 0x1018);
		break;
	case 180:
		write_register(0x20, 0x00EF);
		write_register(0x21, 0x013F);
		write_register(0x03, 0x1000);
		break;
	case 270:
		write_register(0x20, 0x00EF);
		write_register(0x21, 0x0000);
		write_register(0x03, 0x1028);
		break;
	case 0:
		write_register(0x20, 0x0000);
		write_register(0x21, 0x0000);
		write_register(0x03, 0x1030);
		break;
	}
	
	write_command_16(0x22);
	bRotated = rotate;
}
#include <linux/types.h>
#include <linux/stat.h>
#include <linux/fcntl.h>

#include <linux/vmalloc.h>
#include <linux/module.h>
#include <linux/fs.h>
#include <linux/mm.h>
#include <linux/slab.h>
#include <asm/uaccess.h>

typedef void (* sys_func)(unsigned short);

typedef struct init_code_table_proto 
{
	sys_func func;
	unsigned short param;
} init_code_table;

init_code_table init_code[255] = {0};
int function_count;

int generate_init_code(void) 
{
	struct file *filp;
	unsigned long file_size;
	char *buffer;
	char *tmp;
	loff_t pos;
	int i,j;
	unsigned short param, tmp_param;
	char param_len;

	filp = filp_open("/mnt/usb/init.txt", 0, 0);

	if(IS_ERR(filp)) {
		return -1;
	}

	file_size = filp->f_dentry->d_inode->i_size;

	buffer = vmalloc(file_size);
	i = vfs_read(filp, buffer, file_size, &filp->f_pos);

	i = j = 0;

	/* construct initial sequence */
	tmp = buffer;
	
	do {
		if(*(tmp) == '(') {
			if(*(tmp - 1) == 'd') {   /* command */
				init_code[i].func = write_command_16;
			} else if(*(tmp - 1) == 'a') { /* data */
				init_code[i].func = write_data_16;
			} else if(*(tmp - 1) == 'y') { /* delay */
				init_code[i].func = msleep;
			}
			tmp += 3;
			
			param = 0;
			for(j = 0; j < 4; j++) {
				if (*tmp >= 'A' && *tmp <= 'F') {
					tmp_param = *(tmp) - 55;
				} else if (*tmp >= 'a' && *tmp <= 'f') {
					tmp_param = *(tmp) - 87;
				} else {
					tmp_param = *(tmp) - '0';
				}
				
				param |= tmp_param << ((3 - j) * 4);
				tmp++;
			}
			init_code[i].param = param;
			i++;
		}
		tmp++;
	} while((file_size + buffer - tmp) > 2);

	function_count = i;
	
	vfree(buffer);
	filp_close(filp, current->files);

	return 0;
}

void lcd_panel_init (void)
{
	pid_t DaemonPid;
	int ret,i;
	mm_segment_t fs = get_fs();

	set_fs(get_ds());

	//DaemonPid = kernel_thread(generate_init_code, NULL, 0);
	ret = generate_init_code();
	//kill_proc(DaemonPid, SIGTERM, 1);
	set_fs(fs);

	if(ret == 0) {
		msleep(10);
		for(i = 0; i < function_count; i++) {
			/* printk("0x%x, 0x%x\n", init_code[i].func, init_code[i].param); */
			init_code[i].func(init_code[i].param);
		}
	} else {
		/* Initial code: 2008.11.25 */
		msleep(10);
		/* sRST already performed in previous stage */
		write_register(0x0007, 0x0000);
		write_register(0x0012, 0x0000);
		msleep(15);
		
		write_command_16(0x0000);
		write_command_16(0x0000);
		write_command_16(0x0000);
		write_command_16(0x0000);
		
		write_register(0x00A4, 0x0001);
		msleep(15);
		
		write_register(0x0060, 0x2700);
		write_register(0x0008, 0x0505);
		
		/* Gamma control { */
		write_register(0x0030, 0x0206);
		write_register(0x0031, 0x0502);
		write_register(0x0032, 0x0606);
		write_register(0x0033, 0x0303);
		write_register(0x0034, 0x0202);
		write_register(0x0035, 0x0303);
		write_register(0x0036, 0x151F);
		write_register(0x0037, 0x0607);
		write_register(0x0038, 0x0603);
		write_register(0x0039, 0x0707);
		write_register(0x003A, 0x0303);
		write_register(0x003B, 0x0303);
		write_register(0x003C, 0x0204);
		write_register(0x003D, 0x1A1F);
		/* Gamma control } */
		
		/* Power supply on sequence */
		write_register(0x0007, 0x0001);
		write_register(0x0017, 0x0001);
		write_register(0x0019, 0x0000);
		
		write_register(0x0010, 0x17B0);
		write_register(0x0011, 0x0014);
		msleep(60);
		
		write_register(0x0012, 0x0118);
		write_register(0x0013, 0x0500);
		
		write_register(0x0029, 0x0001);
		msleep(40);
		
		write_register(0x0012, 0x0138);
		msleep(120); /* Recommanded by DTC */
		
		write_register(0x0001, 0x0100);
		write_register(0x0002, 0x0300);
		write_register(0x0003, 0x1030);
		write_register(0x0004, 0x0000);
		write_register(0x0009, 0x0000);
		write_register(0x000A, 0x0008);
		write_register(0x000C, 0x0003);
		write_register(0x000D, 0x0140);
		
		write_register(0x0050, 0x0000);
		write_register(0x0051, 0x00EF);
		write_register(0x0052, 0x0000);
		write_register(0x0053, 0x013F);
		
		write_register(0x0061, 0x0001);
		write_register(0x0090, 0x0013);
		write_register(0x0092, 0x0100);
		write_register(0x0093, 0x0001);
		msleep(15);
		
		write_register(0x0007, 0x0021);
		msleep(1);
		write_register(0x0007, 0x0061);
		msleep(15);
		
		write_register(0x0007, 0x0173);	
		write_command_16(0x22);
	}
	
	bInited = 1;
	bFliped = 0;
	bRotated = 0;
	/* That setup a 240x320 window, rotated so we can output 320x240. */
}
void lcd_panel_term(void)
{
	/* Display off */
	udelay(1000);
	write_register(0x0007, 0x0072);
	msleep(40);
	write_register(0x0007, 0x0001);
	msleep(40);
	write_register(0x0007, 0x0000);
	msleep(40);

	/* Power off */
	write_register(0x0010, 0x0080);
	write_register(0x0011, 0x0108);
	write_register(0x0012, 0x0000);
	msleep(40);
	write_register(0x0010, 0x0000);

	/* Set sleep mode */
	/* write_register(0x0010, 0x0002); */

	bInited = 0;
	bFliped = 0;
	bRotated = 0;
}
void lcd_panel_power (int on)
{
	unsigned i;
	static const unsigned short seq[] = {
		0x44, 0xef00,	// Horizontal ram address position (239)
		// Vertical data update window.
		0x45, 0x0000,	// Window vertical RAM address
		0x46, 0x013f,	// Window vertical RAM address = 319
		// Initial data address. Due to our 90 degree rotation
		// this is the bottom left of our update window when
		// viewing the panel in portait mode.
		0x4e, 0x0000,	// Initial X address
		0x4f, 0x0000,	// Initial Y address
	};
	if (on)
	{
		for(i = 0; i < sizeof(seq) / sizeof(seq[0]); i += 2)
			write_register(seq[i], seq[i + 1]);
		// display on
		write_register(0x07, 0x0233);
		// Set register index to 0x22 to write screen data
		write_command_16(0x22);
	}
	else
	{
		// display off
		write_register(0x07, 0x0231);
	}
}

int lcd_bl_init (void)
{
	//backlight_level = 5;
	lcd_bl_power(1);
	return 0;
}


int lcd_bl_power (int on)
{
	if (on) {
		//lcd_bl_control(lcd_bl_getlevel());
		lcd_bl_on_off(1);
	} else {
		lcd_bl_on_off(0);
	}

	return 0;
}

int lcd_bl_on_off(unsigned char on)
{
	if (on) {
		lcd_bl_control(backlight_level);
	} else {
		stmp37xx_gpio_set_af(BANK2_PIN13, 3);
		stmp37xx_gpio_set_dir(BANK2_PIN13, 1);
		stmp37xx_gpio_set_level(BANK2_PIN13, on);
	}
	return 0;
}

enum 
{
	REG_D1D4 = 0x1, 
	REG_D1D3, 
	REG_D4, 
	REG_MAX, 
	REG_LOW, 
};

enum 
{
	MAX20MA = 0x1, 
	MAX30MA, 
	MAX15MA, 
	LCMODE, 
};

static void aat3151_write(unsigned long pulse_count)
{
	int i;
	int flags;

	local_irq_save(flags);

	for(i = 0; i < pulse_count; i++) {
		stmp37xx_gpio_set_level(BANK2_PIN13, 0);
		udelay(25);
		stmp37xx_gpio_set_level(BANK2_PIN13, 1);
		udelay(25);
	}
	local_irq_restore(flags);
}
#define AAT3151_BASE 16

static void aat3151_write_address(unsigned long address)
{
	aat3151_write(AAT3151_BASE + address);
}

static void aat3151_write_data(unsigned long data)
{
	aat3151_write(data);
}

/* level 0-100% */
int lcd_bl_control(unsigned long level)
{
	if (level > 10 || level < 0) {
		level = 10;
	}
	backlight_level = level;

	level = brightness_table[backlight_level];

	level = 16 - level;

	if(level == 16) {
		aat3151_write_address(REG_LOW);     /* send register address */
		udelay(500);                         /* Latch timming */
		aat3151_write_data(12);             /* send data */
		udelay(500);                         /* Latch timming */
		aat3151_write_address(REG_MAX);     /* send register address */
		udelay(500);                         /* Latch timming */
		aat3151_write_data(LCMODE);           /* send data */
		udelay(500);                         /* Latch timming */
	} else {
		aat3151_write_address(REG_MAX);     /* send register address */
		udelay(500);                         /* Latch timming */
		aat3151_write_data(MAX15MA);           /* send data */
		udelay(500);                         /* Latch timming */		

		aat3151_write_address(REG_D1D3);     /* send register address */
		udelay(500);                         /* Latch timming */
		aat3151_write_data(level);           /* send data */
		udelay(500);                         /* Latch timming */
		
		aat3151_write_address(REG_D4);       /* send register address */
		udelay(500);                         /* Latch timming */
		aat3151_write_data(level);           /* send data */
		udelay(500);                         /* Latch timming */
	}

	return 0;
}

int lcd_bl_getlevel (void)
{
	return backlight_level;
}
void lcd_bl_setlevel (unsigned long arg)
{
	if (arg > 10 || arg < 0) {
		arg = 10;
	}
	backlight_level = arg;
}
